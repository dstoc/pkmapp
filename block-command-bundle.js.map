{"version":3,"file":"block-command-bundle.js","sourceRoot":"","sources":["../src/block-command-bundle.ts"],"names":[],"mappings":"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","sourcesContent":["import type {Command, CommandBundle} from './command-palette.js';\nimport type {Library, Document} from './library.js';\nimport type {ViewModelNode} from './markdown/view-model.js';\nimport {getLogicalContainingBlock} from './block-util.js';\nimport {cast} from './asserts.js';\nimport {html} from './deps/lit.js';\nimport './markdown/block-render.js';\nimport './title.js';\n\ntype Result = {document: Document, root: ViewModelNode, name: string, description: string};\n\nexport class BlockCommandBundle implements CommandBundle {\n  constructor(\n    readonly description: string,\n    private library: Library,\n    private action: (result: Result) => Promise<CommandBundle|undefined>,\n    private readonly freeformAction?: (result: {name: string}) => Promise<CommandBundle|undefined>) {\n  }\n  async getCommands(input: string) {\n    const names = await this.library.getAllNames();\n    const parts = input.split('/');\n    const constraints: Result[][] = [];\n    for (let i = 0; i < parts.length; i++) {\n      const filter = getFilter(parts[i]);\n      constraints[i] = (await Promise.all(names.filter(filter).map(async name => {\n        const blocks = await this.library.findAll(name);\n        return blocks.map(item => ({\n          ...item,\n          name: this.library.metadata.getNames(item.root)[0] ?? item.document.name,\n          description: this.library.metadata.getNames(item.root)[0] ?? item.document.name,\n        }));\n      }))).flat();\n      if (i > 0) {\n        constraints[i] = constraints[i].filter(item => {\n          let next: ViewModelNode|undefined;\n          do {\n            next = getLogicalContainingBlock(next ?? item.root);\n            if (next) {\n              const prev = constraints[i - 1].find(({root}) => root === next);\n              if (prev) {\n                item.name = prev.name + '/' + item.name;\n                item.description = prev.description + '/' + item.description;\n                return true;\n              }\n            }\n          } while (next);\n          return false;\n        });\n      }\n    }\n    const seen = new Set<ViewModelNode>();\n    function once(item: Result) {\n      if (seen.has(item.root)) return false;\n      seen.add(item.root);\n      return true;\n    }\n    const commands: Command[] = constraints[constraints.length - 1].filter(once).map(item => ({\n      description: item.description,\n      execute: async () => this.action(item),\n      icon: blockIcon(item),\n      preview: () => blockPreview(item),\n    }));\n    if (this.freeformAction && parts.length == 1 && parts[0].length) {\n      commands.push({\n        description: input,\n        icon: 'ðŸ†• ',\n        execute: () => cast(this.freeformAction)({name: input}),\n      });\n    } \n    return commands;\n  }\n}\n\nexport function blockPreview({root}: {root: ViewModelNode}) {\n  return html`\n    <pkm-title .node=${root}></pkm-title>\n    <p>\n    <md-block-render .block=${root} style=\"margin-top: 1em\"></md-block-render>\n  `;\n}\n\nexport function blockIcon({root}: {root: ViewModelNode}) {\n  if (root.type === 'document') return 'ðŸ“š ';\n  else return 'ðŸ“„ ';\n}\n\nfunction getFilter(input: string) {\n  const pattern = new RegExp(\n      input.replace(\n          /(.)/g, (c) => c.replace(/[^a-zA-Z0-9]/, '\\\\$&') + '.*?'),\n      'i');\n  return (name: string) => pattern.test(name);\n}\n\n"]}