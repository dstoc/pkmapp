{"version":3,"file":"library.js","sourceRoot":"","sources":["../src/library.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {parseBlocks} from './markdown/block-parser.js';\nimport {serializeToString} from './markdown/block-serializer.js';\nimport {DocumentNode} from './markdown/node.js';\nimport {InlineViewModelNode, MarkdownTree, ViewModelNode} from './markdown/view-model.js';\nimport {Observe} from './observe.js';\nimport {BackLinks} from './backlinks.js';\nimport {Metadata} from './metadata.js';\nimport {assert, cast} from './asserts.js';\nimport {resolveDateAlias} from './date-aliases.js';\nimport {getLogicalContainingBlock} from './block-util.js';\n\nexport interface Document {\n  refresh(): Promise<void>;\n  save(): Promise<void>;\n  delete(): Promise<void>;\n  readonly name: string;\n  readonly fileName: string;\n  readonly allNames: string[];\n  readonly tree: MarkdownTree;\n  readonly dirty: boolean;\n  readonly observe: Observe<Document>;\n}\n\nexport interface Library {\n  find(name: string): Promise<{document: Document, root: ViewModelNode}>;\n  findAll(name: string): Promise<{document: Document, root: ViewModelNode}[]>;\n  getDocumentByTree(tree: MarkdownTree): Document|undefined;\n  getAllNames(): Promise<string[]>;\n  readonly backLinks: BackLinks;\n  readonly metadata: Metadata;\n  sync(): Promise<void>;\n}\n\nfunction normalizeName(name: string) {\n  return name.toLowerCase();\n}\n\nasync function*\n    allFiles(prefix: string, directory: FileSystemDirectoryHandle):\n        AsyncGenerator<string, void, unknown> {\n  for await (const entry of directory.values()) {\n    if (entry.kind === 'file' && entry.name.endsWith('.md')) {\n      yield prefix + entry.name.replace(/\\.md$/i, '');\n    } else if (entry.kind === 'directory') {\n      yield* allFiles(prefix + entry.name + '/', entry);\n    }\n  }\n}\n\nasync function getFileHandleFromPath(\n    directory: FileSystemDirectoryHandle, path: string, create = false) {\n  const parts = path.split('/');\n  const name: string = parts.pop()!;\n  for (const part of parts) {\n    directory = await directory.getDirectoryHandle(part, {create});\n  }\n  return directory.getFileHandle(name, {create});\n}\n\nasync function deleteFile(\n    directory: FileSystemDirectoryHandle, path: string, create = false) {\n  const parts = path.split('/');\n  const name: string = parts.pop()!;\n  for (const part of parts) {\n    directory = await directory.getDirectoryHandle(part, {create});\n  }\n  return directory.removeEntry(name);\n}\n\nexport class FileSystemLibrary implements Library {\n  constructor(private readonly directory: FileSystemDirectoryHandle) {}\n  async getAllNames() {\n    const result = new Set<string>();\n    for (const name of this.metadata.getAllNames()) {\n      result.add(normalizeName(name));\n    }\n    for (const document of this.cache.values()) {\n      result.add(normalizeName(document.fileName));\n    }\n    return [...result];\n  }\n  private cache: Map<string, Document> = new Map();\n  backLinks = new BackLinks();\n  metadata = new Metadata();\n  getDocumentByTree(tree: MarkdownTree): Document|undefined {\n    // TODO: index\n    for (const document of this.cache.values()) {\n      if (document.tree === tree) {\n        return document;\n      }\n    }\n    return undefined;\n  }\n  async sync() {\n    for await (const name of allFiles('', this.directory)) {\n      const document = await this.loadDocument(name);\n      await document.refresh();\n    }\n  }\n  private findByName(name: string) {\n    name = normalizeName(name);\n    const result = this.metadata.findByName(name);\n    if (this.cache.has(name)) {\n      result.push(cast(this.cache.get(name)).tree.root);\n    }\n    return result;\n  }\n  async findAll(name: string, create = false) {\n    name = resolveDateAlias(name) ?? name;\n\n    type Result = {document: Document, root: ViewModelNode};\n    const parts = name.split('/');\n    const blocks: Result[][] = [];\n    for (let i = 0; i < parts.length; i++) {\n      blocks[i] = this.findByName(parts[i]).map(root => {\n        return {\n          document: cast(this.getDocumentByTree(root.viewModel.tree)),\n          root,\n        }\n      });\n      if (i > 0) {\n        blocks[i] = blocks[i].filter(item => {\n          let next: ViewModelNode|undefined;\n          do {\n            next = getLogicalContainingBlock(next ?? item.root);\n            if (next) {\n              const prev = blocks[i - 1].find(({root}) => root === next);\n              if (prev) return true;\n            }\n          } while (next);\n          return false;\n        });\n      }\n    }\n    const results = blocks[blocks.length - 1];\n    if (create && parts.length === 1 && results.length === 0) {\n      const document = await this.loadDocument(name, true);\n      return [{\n        document,\n        root: document.tree.root,\n      }];\n    }\n    return results;\n  }\n  // TODO: rename findOrCreate?\n  async find(name: string) {\n    const [result] = await this.findAll(name, true);\n    return result;\n  }\n  private async loadDocument(name: string, forceRefresh = false): Promise<Document> {\n    name = resolveDateAlias(name) ?? name;\n    const fileName = name + '.md';\n    const load = async (ifModifiedSince: number) => {\n      let text = '';\n      let lastModified = new Date().getTime();\n      try {\n        const handle = await getFileHandleFromPath(this.directory, fileName);\n        const file = await handle.getFile();\n        // TODO: also check that the content has actually changed\n        if (ifModifiedSince >= file.lastModified) return {lastModified: file.lastModified};\n        const decoder = new TextDecoder();\n        text = decoder.decode(await file.arrayBuffer());\n        lastModified = file.lastModified;\n      } catch (e) {\n        console.error(e);\n      }\n      const root = parseBlocks(text);\n      assert(root && root.type === 'document');\n      return {root, lastModified};\n    };\n    const cached = this.cache.get(normalizeName(name));\n    if (cached) {\n      if (forceRefresh) {\n        await cached.refresh();\n      }\n      return cached;\n    }\n    const {root, lastModified} = await load(0);\n    const library = this;\n    const result = new class implements Document {\n      constructor() {\n        this.lastModified = lastModified;\n        this.tree = new MarkdownTree(cast(root), this);\n        this.tree.observe.add(() => this.markDirty());\n      }\n      state: 'active'|'deleted' = 'active';\n      readonly tree: MarkdownTree;\n      lastModified: number;\n      dirty = false;\n      observe: Observe<Document> = new Observe<Document>(this);\n      get name() {\n        return this.allNames[0];\n      }\n      get allNames() {\n        return [\n          ...library.metadata.getNames(this.tree.root),\n          name,\n        ];\n      }\n      get fileName() {\n        return name;\n      }\n      postEditUpdate(node: ViewModelNode, change: 'connected'|'disconnected'|'changed') {\n        if (node.type === 'paragraph') {\n          library.backLinks.postEditUpdate(node as InlineViewModelNode, change);\n        }\n        if (node.type === 'code-block') {\n          library.metadata.updateCodeblock(node, change);\n        }\n        if (node.type === 'section') {\n          library.metadata.updateSection(node, change);\n        }\n      }\n      async refresh() {\n        const {root, lastModified} = await load(this.lastModified);\n        if (root) {\n          this.lastModified = lastModified;\n          this.tree.setRoot(this.tree.add<DocumentNode>(root));\n          this.tree.observe.notify();\n        }\n      }\n      async save() {\n        if (this.state !== 'active') return;\n        const text = serializeToString(this.tree.root);\n        const handle = await getFileHandleFromPath(library.directory, fileName, true);\n        const stream = await handle.createWritable();\n        await stream.write(text);\n        await stream.close();\n        this.lastModified = new Date().getTime();\n      }\n      async delete() {\n        this.state = 'deleted';\n        this.tree.setRoot(this.tree.add<DocumentNode>({\n          type: 'document'\n        }));\n        library.cache.delete(normalizeName(this.fileName));\n        await deleteFile(library.directory, fileName);\n      }\n      private pendingModifications = 0;\n      async markDirty() {\n        // TODO: The tree could be in an inconsistent state, don't trigger the\n        // the observer until the edit is finished, or wait for normalization.\n        await 0;\n        this.dirty = true;\n        this.observe.notify();\n        if (this.pendingModifications++) return;\n        while (true) {\n          const preSave = this.pendingModifications;\n          // Save immediately on the fist iteration, may help keep tests fast.\n          await this.save();\n          if (this.pendingModifications === preSave) {\n            this.pendingModifications = 0;\n            this.dirty = false;\n            this.observe.notify();\n            return;\n          }\n          // Wait for an idle period with no modifications.\n          let preIdle = NaN;\n          do {\n            preIdle = this.pendingModifications;\n            // TODO: maybe a timeout is better?\n            await new Promise((resolve) => requestIdleCallback(resolve));\n          } while (preIdle != this.pendingModifications);\n        }\n      }\n    };\n    this.cache.set(normalizeName(name), result);\n    return result;\n  }\n}\n"]}