{"version":3,"file":"library.js","sourceRoot":"","sources":["../src/library.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {parseBlocks} from './markdown/block-parser.js';\nimport {serializeToString} from './markdown/block-serializer.js';\nimport {MarkdownNode} from './markdown/node.js';\nimport {MarkdownTree} from './markdown/view-model.js';\nimport {Observe} from './observe.js';\n\nexport interface Document {\n  refresh(): Promise<void>;\n  save(): Promise<void>;\n  readonly tree: MarkdownTree;\n  readonly dirty: boolean;\n  readonly observe: Observe<Document>;\n}\n\nexport interface Library {\n  getDocument(name: string): Promise<Document>;\n  getAllNames(): Promise<string[]>;\n}\n\nasync function*\n    allFiles(prefix: string, directory: FileSystemDirectoryHandle):\n        AsyncGenerator<string, void, unknown> {\n  for await (const entry of directory.values()) {\n    if (entry.kind === 'file' && entry.name.endsWith('.md')) {\n      yield prefix + entry.name.replace(/\\.md$/i, '');\n    } else if (entry.kind === 'directory') {\n      yield* allFiles(prefix + entry.name + '/', entry);\n    }\n  }\n}\n\nasync function getFileHandleFromPath(\n    directory: FileSystemDirectoryHandle, path: string, create = false) {\n  const parts = path.split('/');\n  const name: string = parts.pop()!;\n  for (const part of parts) {\n    directory = await directory.getDirectoryHandle(part, {create});\n  }\n  return directory.getFileHandle(name, {create});\n}\n\nexport class FileSystemLibrary implements Library {\n  constructor(private readonly directory: FileSystemDirectoryHandle) {}\n  async getAllNames(): Promise<string[]> {\n    const result = [];\n    for await (const name of allFiles('', this.directory)) {\n      result.push(name);\n    }\n    return result;\n  }\n  async getDocument(name: string): Promise<Document> {\n    const load = async () => {\n      const fileName = name;\n      let text = '';\n      try {\n        const handle = await getFileHandleFromPath(this.directory, fileName);\n        const file = await handle.getFile();\n        const decoder = new TextDecoder();\n        text = decoder.decode(await file.arrayBuffer());\n      } catch (e) {\n        console.error(e);\n      }\n      return parseBlocks(text)!;\n    };\n    const directory = this.directory;\n    const node = await load();\n    const result = new class implements Document {\n      constructor(public tree = new MarkdownTree(node)) {\n        this.tree.observe.add(() => this.markDirty());\n      }\n      dirty = false;\n      observe: Observe<Document> = new Observe<Document>(this);\n      async refresh() {\n        this.tree.root = this.tree.import<MarkdownNode>(await load());\n        this.tree.observe.notify();\n      }\n      async save() {\n        const text = serializeToString(this.tree.root);\n        const fileName = name;\n        const handle = await getFileHandleFromPath(directory, fileName, true);\n        const stream = await handle.createWritable();\n        await stream.write(text);\n        await stream.close();\n      }\n      private pendingModifications = 0;\n      async markDirty() {\n        // TODO: The tree could be in an inconsistent state, don't trigger the\n        // the observer until the edit is finished, or wait for normalization.\n        await 0;\n        this.dirty = true;\n        this.observe.notify();\n        if (this.pendingModifications++) return;\n        while (true) {\n          let preSave = this.pendingModifications;\n          // Save immediately on the fist iteration, may help keep tests fast.\n          await this.save();\n          if (this.pendingModifications === preSave) {\n            this.pendingModifications = 0;\n            this.dirty = false;\n            this.observe.notify();\n            return;\n          }\n          // Wait for an idle period with no modifications.\n          let preIdle = NaN;\n          do {\n            preIdle = this.pendingModifications;\n            // TODO: maybe a timeout is better?\n            await new Promise(resolve => requestIdleCallback(resolve));\n          } while (preIdle != this.pendingModifications);\n        }\n      }\n    };\n    return result;\n  }\n}\n"]}