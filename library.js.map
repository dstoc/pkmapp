{"version":3,"file":"library.js","sourceRoot":"","sources":["../src/library.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {parseBlocks} from './markdown/block-parser.js';\nimport {serializeToString} from './markdown/block-serializer.js';\nimport {DocumentNode} from './markdown/node.js';\nimport {InlineViewModelNode, MarkdownTree, ViewModelNode} from './markdown/view-model.js';\nimport {Observe} from './observe.js';\nimport {BackLinks} from './backlinks.js';\nimport {Metadata} from './metadata.js';\nimport {assert, cast} from './asserts.js';\nimport {resolveDateAlias} from './date-aliases.js';\nimport {getLogicalContainingBlock} from './block-util.js';\n\nexport interface Document {\n  refresh(): Promise<void>;\n  save(): Promise<void>;\n  delete(): Promise<void>;\n  readonly name: string;\n  readonly filename: string;\n  readonly allNames: string[];\n  readonly tree: MarkdownTree;\n  readonly dirty: boolean;\n  readonly observe: Observe<Document>;\n}\n\nexport interface Library {\n  findAll(name: string): Promise<{document: Document, root: ViewModelNode}[]>;\n  newDocument(name: string): Promise<Document>;\n  getDocumentByTree(tree: MarkdownTree): Document|undefined;\n  getAllNames(): Promise<string[]>;\n  readonly backLinks: BackLinks;\n  readonly metadata: Metadata;\n  sync(): Promise<void>;\n}\n\nfunction normalizeName(name: string) {\n  return name.toLowerCase();\n}\n\nasync function*\n    allFiles(prefix: string, directory: FileSystemDirectoryHandle):\n        AsyncGenerator<string, void, unknown> {\n  for await (const entry of directory.values()) {\n    if (entry.kind === 'file' && entry.name.endsWith('.md')) {\n      yield prefix + entry.name.replace(/\\.md$/i, '');\n    } else if (entry.kind === 'directory') {\n      yield* allFiles(prefix + entry.name + '/', entry);\n    }\n  }\n}\n\nasync function createNewFile(directory: FileSystemDirectoryHandle, name: string, content: string) {\n  let n = 0;\n  while (true) {\n    const resultName = `${name}${n > 0 ? '-' + String(n) : ''}`;\n    const filename = `${resultName}.md`\n    try {\n      await directory.getFileHandle(filename);\n      n++;\n      continue;\n    } catch (e) {\n      if ((e as DOMException).name !== 'NotFoundError') {\n        throw e;\n      }\n    }\n    const file = await directory.getFileHandle(filename, {create: true});\n    const writable = await file.createWritable();\n    await writable.write(content);\n    await writable.close();\n    return resultName;\n  }\n}\n\nasync function getFileHandleFromPath(\n    directory: FileSystemDirectoryHandle, path: string, create = false) {\n  const parts = path.split('/');\n  const name: string = parts.pop()!;\n  for (const part of parts) {\n    directory = await directory.getDirectoryHandle(part, {create});\n  }\n  return directory.getFileHandle(name, {create});\n}\n\nasync function deleteFile(\n    directory: FileSystemDirectoryHandle, path: string, create = false) {\n  const parts = path.split('/');\n  const name: string = parts.pop()!;\n  for (const part of parts) {\n    directory = await directory.getDirectoryHandle(part, {create});\n  }\n  return directory.removeEntry(name);\n}\n\nexport class FileSystemLibrary implements Library {\n  constructor(readonly directory: FileSystemDirectoryHandle) {}\n  async getAllNames() {\n    const result = new Set<string>();\n    for (const name of this.metadata.getAllNames()) {\n      result.add(normalizeName(name));\n    }\n    for (const document of this.cache.values()) {\n      if (normalizeName(document.name) === normalizeName(document.filename)) {\n        result.add(normalizeName(document.filename));\n      }\n    }\n    return [...result];\n  }\n  cache: Map<string, Document> = new Map();\n  backLinks = new BackLinks();\n  metadata = new Metadata();\n  getDocumentByTree(tree: MarkdownTree): Document|undefined {\n    // TODO: index\n    for (const document of this.cache.values()) {\n      if (document.tree === tree) {\n        return document;\n      }\n    }\n    return undefined;\n  }\n  async sync() {\n    for await (const name of allFiles('', this.directory)) {\n      const document = await this.loadDocument(name);\n      if (!document) {\n        console.error(`Could not load: ${name}`);\n        continue;\n      }\n      assert(document);\n      await document.refresh();\n    }\n  }\n  private findByName(name: string) {\n    name = normalizeName(name);\n    const result = new Set(this.metadata.findByName(name));\n    if (this.cache.has(name)) {\n      const document = cast(this.cache.get(name));\n      if (document.name === document.filename) {\n        result.add(document.tree.root);\n      }\n    }\n    return [...result];\n  }\n  async findAll(name: string) {\n    name = resolveDateAlias(name) ?? name;\n\n    type Result = {document: Document, root: ViewModelNode};\n    const parts = name.split('/');\n    const blocks: Result[][] = [];\n    for (let i = 0; i < parts.length; i++) {\n      blocks[i] = this.findByName(parts[i]).map(root => {\n        return {\n          document: cast(this.getDocumentByTree(root.viewModel.tree)),\n          root,\n        }\n      });\n      if (i > 0) {\n        blocks[i] = blocks[i].filter(item => {\n          let next: ViewModelNode|undefined;\n          do {\n            next = getLogicalContainingBlock(next ?? item.root);\n            if (next) {\n              const prev = blocks[i - 1].find(({root}) => root === next);\n              if (prev) return true;\n            }\n          } while (next);\n          return false;\n        });\n      }\n    }\n    return blocks[blocks.length - 1];\n  }\n  async newDocument(name: string): Promise<Document> {\n    const content = `# ${name}`;\n    const filename = await createNewFile(this.directory, name.toLowerCase(), content);\n    return cast(await this.loadDocument(filename));\n  }\n  async load(name: string, ifModifiedSince: number) {\n    let text = '';\n    let lastModified = new Date().getTime();\n    try {\n      const filename = name + '.md';\n      const handle = await getFileHandleFromPath(this.directory, filename);\n      const file = await handle.getFile();\n      // TODO: also check that the content has actually changed\n      if (ifModifiedSince >= file.lastModified) return {lastModified: file.lastModified};\n      const decoder = new TextDecoder();\n      text = decoder.decode(await file.arrayBuffer());\n      lastModified = file.lastModified;\n    } catch (e) {\n      console.error(e);\n      return undefined;\n    }\n    const root = parseBlocks(text);\n    assert(root && root.type === 'document');\n    return {root, lastModified};\n  }\n  private async loadDocument(name: string): Promise<Document|undefined> {\n    name = resolveDateAlias(name) ?? name;\n    const cached = this.cache.get(normalizeName(name));\n    if (cached) {\n      return cached;\n    }\n    const {root, lastModified} = await this.load(name, 0) ?? {};\n    if (!root || lastModified == null) return;\n    const library = this;\n    const result = new FileSystemDocument(library, lastModified, root, name);\n    this.cache.set(normalizeName(name), result);\n    return result;\n  }\n}\n\nclass FileSystemDocument implements Document {\n  constructor(\n      private library: FileSystemLibrary,\n      private lastModified: number,\n      root: DocumentNode,\n      readonly filename: string) {\n    this.tree = new MarkdownTree(cast(root), this);\n    this.tree.observe.add(() => this.markDirty());\n  }\n  state: 'active'|'deleted' = 'active';\n  readonly tree: MarkdownTree;\n  dirty = false;\n  observe: Observe<Document> = new Observe<Document>(this);\n  get name() {\n    return this.library.metadata.getPreferredName(this.tree.root) ?? this.filename;\n  }\n  get allNames() {\n    const names = [\n      ...this.library.metadata.getNames(this.tree.root),\n    ];\n    return names.length ? names : [this.filename];\n  }\n  postEditUpdate(node: ViewModelNode, change: 'connected'|'disconnected'|'changed') {\n    if (node.type === 'paragraph') {\n      this.library.backLinks.postEditUpdate(node as InlineViewModelNode, change);\n    }\n    if (node.type === 'code-block') {\n      this.library.metadata.updateCodeblock(node, change);\n    }\n    if (node.type === 'section') {\n      this.library.metadata.updateSection(node, change);\n    }\n  }\n  async refresh() {\n    const {root, lastModified} = cast(await this.library.load(this.filename, this.lastModified));\n    if (root) {\n      this.lastModified = lastModified;\n      this.tree.setRoot(this.tree.add<DocumentNode>(root));\n      this.tree.observe.notify();\n    }\n  }\n  async save() {\n    if (this.state !== 'active') return;\n    const text = serializeToString(this.tree.root);\n    const handle = await getFileHandleFromPath(this.library.directory, this.filename + '.md', true);\n    const stream = await handle.createWritable();\n    await stream.write(text);\n    await stream.close();\n    this.lastModified = new Date().getTime();\n  }\n  async delete() {\n    this.state = 'deleted';\n    this.tree.setRoot(this.tree.add<DocumentNode>({\n      type: 'document'\n    }));\n    this.library.cache.delete(normalizeName(this.filename));\n    await deleteFile(this.library.directory, this.filename + '.md');\n  }\n  private pendingModifications = 0;\n  async markDirty() {\n    // TODO: The tree could be in an inconsistent state, don't trigger the\n    // the observer until the edit is finished, or wait for normalization.\n    await 0;\n    this.dirty = true;\n    this.observe.notify();\n    if (this.pendingModifications++) return;\n    while (true) {\n      const preSave = this.pendingModifications;\n      // Save immediately on the fist iteration, may help keep tests fast.\n      await this.save();\n      if (this.pendingModifications === preSave) {\n        this.pendingModifications = 0;\n        this.dirty = false;\n        this.observe.notify();\n        return;\n      }\n      // Wait for an idle period with no modifications.\n      let preIdle = NaN;\n      do {\n        preIdle = this.pendingModifications;\n        // TODO: maybe a timeout is better?\n        await new Promise((resolve) => requestIdleCallback(resolve));\n      } while (preIdle != this.pendingModifications);\n    }\n  }\n}\n"]}