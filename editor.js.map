{"version":3,"file":"editor.js","sourceRoot":"","sources":["../src/editor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport './markdown/block-render.js';\nimport './autocomplete.js';\nimport './title.js';\n\nimport {libraryContext} from './app-context.js';\nimport {assert, cast} from './asserts.js';\nimport {\n  Command,\n  CommandBundle,\n  SimpleCommandBundle,\n} from './command-palette.js';\nimport {contextProvided} from './deps/lit-labs-context.js';\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  state,\n} from './deps/lit.js';\nimport {Document, Library} from './library.js';\nimport {parseBlocks} from './markdown/block-parser.js';\nimport {MarkdownRenderer} from './markdown/block-render.js';\nimport {serializeToString} from './markdown/block-serializer.js';\nimport {HostContext, focusNode} from './markdown/host-context.js';\nimport {\n  MarkdownInline,\n  InlineInput,\n  InlineKeyDown,\n  InlineLinkClick,\n} from './markdown/inline-render.js';\nimport {InlineNode, MarkdownNode, ParagraphNode} from './markdown/node.js';\nimport {normalizeTree} from './markdown/normalize.js';\nimport {\n  ancestors,\n  children,\n  findAncestor,\n  findFinalEditable,\n  findNextEditable,\n  findPreviousEditable,\n  reverseDfs,\n  swapNodes,\n  removeDescendantNodes,\n  cloneNode,\n} from './markdown/view-model-util.js';\nimport {\n  InlineEdit,\n  InlineViewModel,\n  InlineViewModelNode,\n  ViewModelNode,\n  MarkdownTree,\n} from './markdown/view-model.js';\nimport {Observer, Observers} from './observe.js';\nimport {getContainingTransclusion} from './markdown/transclusion.js';\nimport {Autocomplete} from './autocomplete.js';\nimport {\n  maybeEditBlockSelectionIndent,\n  editInlineIndent,\n} from './indent-util.js';\nimport {\n  getBlockSelectionTarget,\n  maybeRemoveSelectedNodes,\n  maybeRemoveSelectedNodesIn,\n} from './block-selection-util.js';\nimport {\n  isLogicalContainingBlock,\n  getLogicalContainingBlock,\n} from './block-util.js';\nimport {\n  blockPreview,\n  blockIcon,\n  BlockCommandBundle,\n} from './block-command-bundle.js';\nimport {getLanguageTools} from './language-tool-bundle.js';\n\nexport interface EditorNavigation {\n  kind: 'navigate' | 'replace';\n  document: Document;\n  root: ViewModelNode;\n}\n\n@customElement('pkm-editor')\nexport class Editor extends LitElement {\n  defaultName?: string;\n  @property({type: String, reflect: true})\n  status: 'loading' | 'loaded' | 'error' | undefined;\n  @state() private document?: Document;\n  @state() private root?: ViewModelNode;\n  private name?: string;\n  @property({type: Boolean, reflect: true}) dirty = false;\n  @contextProvided({context: libraryContext, subscribe: true})\n  @state()\n  library!: Library;\n  @query('md-block-render') private markdownRenderer!: MarkdownRenderer;\n  @query('pkm-autocomplete') private autocomplete!: Autocomplete;\n  private observers = new Observers(\n    new Observer(\n      () => this.document?.observe,\n      (t, o) => t?.add(o),\n      (t, o) => t?.remove(o),\n      () => this.requestUpdate()\n    )\n  );\n  static override get styles() {\n    return [\n      css`\n        #status {\n          position: absolute;\n        }\n        #content {\n          display: flex;\n          justify-content: center;\n          flex-grow: 1;\n        }\n        md-block-render {\n          width: 700px;\n        }\n        pkm-title {\n          display: block;\n          position: sticky;\n          top: 0;\n          padding-bottom: 0.5em;\n          background: var(--root-background-color);\n        }\n      `,\n    ];\n  }\n  constructor() {\n    super();\n  }\n  override render() {\n    this.observers.update();\n    this.dirty = this.document?.dirty ?? false;\n    return html` <div id=\"status\">${this.document?.dirty ? '💽' : ''}</div>\n      <pkm-title\n        .node=${this.root}\n        @title-item-click=${this.onTitleItemClick}\n      ></pkm-title>\n      <div id=\"content\">\n        <md-block-render\n          .block=${this.root}\n          @inline-input=${this.onInlineInput}\n          @inline-link-click=${this.onInlineLinkClick}\n          @inline-keydown=${this.onInlineKeyDown}\n        ></md-block-render>\n      </div>\n      <pkm-autocomplete></pkm-autocomplete>`;\n  }\n  override updated() {\n    if (this.name === undefined || this.name === this.document?.name) return;\n    this.name = this.document?.name;\n    this.dispatchEvent(\n      new CustomEvent('editor-navigate', {\n        detail: {\n          kind: 'replace',\n          document: this.document,\n          root: this.root,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n  override async connectedCallback() {\n    super.connectedCallback();\n    await this.updateComplete;\n    if (this.defaultName !== undefined) {\n      await this.navigateByName(this.defaultName, true);\n    }\n  }\n  async createAndNavigateByName(name: string, fireEvent = false) {\n    const document = await this.library.newDocument(name);\n    this.navigate(document, document.tree.root, fireEvent);\n  }\n  async navigateByName(name: string, fireEvent = false) {\n    const old = {\n      status: this.status,\n      document: this.document,\n      root: this.root,\n      name: this.name,\n    };\n    this.status = 'loading';\n    this.document = undefined;\n    this.root = undefined;\n    this.name = undefined;\n    try {\n      const results = await this.library.findAll(name);\n      if (results.length === 1) {\n        const [{document, root}] = results;\n        if (this.document === document && this.root === root) {\n          Object.assign(this, old);\n          return;\n        }\n        this.navigate(document, root, fireEvent);\n      } else if (results.length > 1) {\n        Object.assign(this, old);\n        this.dispatchEvent(\n          new CustomEvent('editor-commands', {\n            detail: new SimpleCommandBundle(\n              `Which \"${name}\"?`,\n              results.map(({document, root}) => ({\n                description: document.name,\n                execute: async () =>\n                  void this.navigate(document, root, fireEvent),\n                icon: blockIcon({root}),\n                preview: () => blockPreview({root}),\n              }))\n            ),\n            bubbles: true,\n            composed: true,\n          })\n        );\n      } else {\n        Object.assign(this, old);\n        this.dispatchEvent(\n          new CustomEvent('editor-commands', {\n            detail: new SimpleCommandBundle(\n              `\"${name}\" does not exist, create it?`,\n              [\n                {\n                  description: 'Yes',\n                  execute: async () =>\n                    void this.createAndNavigateByName(name, fireEvent),\n                },\n                {\n                  description: 'No',\n                  execute: async () => void 0,\n                },\n              ]\n            ),\n            bubbles: true,\n            composed: true,\n          })\n        );\n      }\n    } catch (e) {\n      this.status = 'error';\n      console.error(e);\n    }\n  }\n  navigate(document: Document, root: ViewModelNode, fireEvent = false) {\n    if (this.document === document && this.root === root) {\n      if (this.status === 'loading') this.status = 'loaded';\n      return;\n    }\n    assert(document.tree === root.viewModel.tree);\n    assert(root.viewModel.connected);\n    this.document = document;\n    this.root = root;\n    this.name = this.document.name;\n    this.status = 'loaded';\n    const node = findNextEditable(this.root, this.root);\n    if (node) {\n      focusNode(this.markdownRenderer.hostContext, node, 0);\n    }\n    if (fireEvent)\n      this.dispatchEvent(\n        new CustomEvent('editor-navigate', {\n          detail: {\n            document,\n            root,\n          },\n          bubbles: true,\n          composed: true,\n        })\n      );\n  }\n  onInlineLinkClick({detail: {destination}}: CustomEvent<InlineLinkClick>) {\n    if (/^(\\w)+:/i.test(destination)) {\n      window.open(destination);\n    } else {\n      this.navigateByName(destination, true);\n    }\n  }\n  onTitleItemClick({detail}: CustomEvent) {\n    this.root = detail;\n  }\n  onInlineKeyDown(event: CustomEvent<InlineKeyDown>) {\n    const {\n      detail: {inline, node, keyboardEvent},\n    } = event;\n    const hostContext = cast(inline.hostContext);\n    const finishEditing = node.viewModel.tree.edit();\n    try {\n      assert(inline.node);\n      if (this.autocomplete.onInlineKeyDown(event)) {\n        return;\n      } else if (\n        ['ArrowUp', 'ArrowLeft', 'ArrowDown', 'ArrowRight'].includes(\n          keyboardEvent.key\n        )\n      ) {\n        keyboardEvent.preventDefault();\n        const direction = ['ArrowUp', 'ArrowLeft'].includes(keyboardEvent.key)\n          ? 'backward'\n          : 'forward';\n        const alter = keyboardEvent.shiftKey ? 'extend' : 'move';\n        const granularity = ['ArrowUp', 'ArrowDown'].includes(keyboardEvent.key)\n          ? 'line'\n          : keyboardEvent.ctrlKey\n          ? 'word'\n          : 'character';\n        const result = hostContext.hasSelection\n          ? 0\n          : inline.moveCaret(alter, direction, granularity);\n        if (result === true) {\n          hostContext.clearSelection();\n        } else {\n          function updateFocus(\n            element: Element & {hostContext?: HostContext},\n            node: ViewModelNode,\n            offset: number\n          ) {\n            // Retarget if there's any containing transclusion that has a selection.\n            const target = getBlockSelectionTarget(element);\n            if (target) {\n              node = cast(target.node);\n              element = target;\n            }\n            if (alter !== 'extend') {\n              cast(element.hostContext).clearSelection();\n            }\n            while (true) {\n              const root = cast(cast(element.hostContext).root);\n              const next =\n                direction === 'backward'\n                  ? findPreviousEditable(node, root)\n                  : findNextEditable(node, root);\n              if (next) {\n                focusNode(\n                  cast(element.hostContext),\n                  next,\n                  direction === 'backward' ? -offset : offset\n                );\n                return {node, element, next};\n              } else {\n                const transclusion = getContainingTransclusion(element);\n                if (!transclusion || alter === 'extend') return {};\n                element = transclusion;\n                node = cast(transclusion.node);\n              }\n            }\n          }\n          const {\n            node: updatedNode,\n            element,\n            next,\n          } = updateFocus(inline, node, result);\n          if (next && alter === 'extend') {\n            const hostContext = cast(element.hostContext);\n            if (hostContext.selectionAnchor) {\n              hostContext.extendSelection(updatedNode, next);\n            } else {\n              this.autocomplete.abort();\n              hostContext.setSelection(updatedNode, next);\n            }\n          }\n        }\n      } else if (keyboardEvent.key === 'Tab') {\n        keyboardEvent.preventDefault();\n        const mode = keyboardEvent.shiftKey ? 'unindent' : 'indent';\n        if (maybeEditBlockSelectionIndent(inline, mode)) return;\n        editInlineIndent(inline, mode);\n      } else if (keyboardEvent.key === 'a' && keyboardEvent.ctrlKey) {\n        keyboardEvent.preventDefault();\n        if (!hostContext.hasSelection) {\n          this.autocomplete.abort();\n          hostContext.setSelection(node, node);\n        }\n      } else if (keyboardEvent.key === 'c' && keyboardEvent.ctrlKey) {\n        const {hostContext} = getBlockSelectionTarget(inline) ?? {};\n        if (!hostContext) return;\n        keyboardEvent.preventDefault();\n        copyMarkdownToClipboard(serializeSelection(hostContext));\n      } else if (keyboardEvent.key === 'x' && keyboardEvent.ctrlKey) {\n        const {hostContext} = getBlockSelectionTarget(inline) ?? {};\n        if (!hostContext) return;\n        keyboardEvent.preventDefault();\n        copyMarkdownToClipboard(serializeSelection(hostContext));\n        maybeRemoveSelectedNodesIn(hostContext);\n        hostContext.clearSelection();\n      } else if (keyboardEvent.key === 'Escape') {\n        hostContext.clearSelection();\n      } else if (keyboardEvent.key === 'Backspace') {\n        if (!maybeRemoveSelectedNodes(inline)) return;\n        keyboardEvent.preventDefault();\n      } else {\n        return;\n      }\n    } finally {\n      finishEditing();\n    }\n  }\n  async triggerPaste(\n    inline: MarkdownInline,\n    node: InlineViewModelNode,\n    edit: {startIndex: number; oldEndIndex: number},\n    forceMarkdown = false\n  ) {\n    const content = await navigator.clipboard.read();\n    const mdItem = content.find((item) =>\n      item.types.includes('web text/markdown')\n    );\n    let mdText;\n    if (mdItem) {\n      const blob = await mdItem.getType('web text/markdown');\n      mdText = await blob.text();\n      // TODO: Drop this hack for broken custom formats.\n      if (mdText.length === 0) {\n        mdText = await navigator.clipboard.readText();\n      }\n    } else if (forceMarkdown) {\n      mdText = await navigator.clipboard.readText();\n    }\n    if (mdText) {\n      const newFocus = insertMarkdown(mdText, node);\n      if (newFocus) focusNode(cast(inline.hostContext), newFocus, Infinity);\n    } else {\n      let text = await navigator.clipboard.readText();\n      // TODO: Escape block creation.\n      text = text.replace(/\\n/g, ' ');\n      const finishEditing = node.viewModel.tree.edit();\n      try {\n        this.editInlineNode(\n          node,\n          {\n            ...edit,\n            newText: text,\n            newEndIndex: edit.oldEndIndex + text.length,\n          },\n          cast(inline.hostContext)\n        ); // TODO: wrong context\n      } finally {\n        finishEditing();\n      }\n    }\n  }\n  onInlineInput(event: CustomEvent<InlineInput>) {\n    const {\n      detail: {inline, inputEvent, inputStart, inputEnd},\n    } = event;\n    if (!inline.node) return;\n\n    // TODO: Most edit types could be handled here. E.g. insertText\n    // could replace the selection.\n    const {hostContext: selectionHostContext} =\n      getBlockSelectionTarget(inline) ?? {};\n    selectionHostContext?.clearSelection();\n    const finishEditing = inline.node.viewModel.tree.edit();\n    try {\n      if (handleInlineInputAsBlockEdit(event, cast(inline.hostContext))) {\n        this.autocomplete.abort();\n        return;\n      }\n      let newText;\n      let startIndex;\n      let oldEndIndex;\n      let newEndIndex: number;\n      if (\n        inputEvent.inputType === 'insertText' ||\n        inputEvent.inputType === 'insertReplacementText' ||\n        inputEvent.inputType === 'insertFromPaste' ||\n        inputEvent.inputType === 'deleteByCut' ||\n        inputEvent.inputType === 'deleteContentBackward'\n      ) {\n        startIndex = inputStart.index;\n        oldEndIndex = inputEnd.index;\n        if (\n          inputEvent.inputType === 'insertReplacementText' ||\n          inputEvent.inputType === 'insertFromPaste'\n        ) {\n          this.triggerPaste(inline, inline.node, {startIndex, oldEndIndex});\n          this.autocomplete.abort();\n          return;\n        } else if (inputEvent.inputType === 'deleteByCut') {\n          newText = '';\n        } else if (inputEvent.inputType === 'deleteContentBackward') {\n          newText = '';\n          if (startIndex === oldEndIndex) {\n            startIndex--;\n          }\n          startIndex = Math.max(0, startIndex);\n        } else {\n          newText = inputEvent.data ?? '';\n        }\n        newEndIndex = startIndex + newText.length;\n      } else {\n        console.log('unsupported inputType:', inputEvent.inputType);\n        return;\n      }\n\n      const edit = {\n        newText,\n        startIndex,\n        oldEndIndex,\n        newEndIndex,\n      };\n\n      this.editInlineNode(inline.node, edit, cast(inline.hostContext));\n      this.autocomplete.onInlineEdit(inline, newText, newEndIndex);\n    } finally {\n      finishEditing();\n    }\n  }\n  private editInlineNode(\n    node: InlineViewModelNode,\n    edit: InlineEdit,\n    hostContext: HostContext\n  ) {\n    const newNodes = node.viewModel.edit(edit);\n    if (newNodes) {\n      // TODO: is this needed?\n      normalizeTree(node.viewModel.tree);\n      const next = findNextEditable(newNodes[0], cast(hostContext.root), true);\n      // TODO: is the focus offset always 0?\n      if (next) focusNode(hostContext, next, 0);\n    } else {\n      // TODO: generalize this (inline block mutation)\n      const parent = node.viewModel.parent;\n      if (\n        parent?.type === 'list-item' &&\n        parent.checked === undefined &&\n        /^\\[( |x)] /.test(node.content)\n      ) {\n        parent.viewModel.updateChecked(node.content[1] === 'x');\n        node.viewModel.edit({\n          newText: '',\n          startIndex: 0,\n          newEndIndex: 0,\n          oldEndIndex: 4,\n        });\n      }\n      focusNode(hostContext, node, edit.newEndIndex);\n    }\n  }\n  getCommands(): CommandBundle {\n    const {\n      inline: activeInline,\n      startIndex,\n      endIndex,\n    } = this.markdownRenderer.getInlineSelection();\n    const activeNode = activeInline?.node;\n    const inTopLevelDocument =\n      activeNode?.viewModel.tree === this.root?.viewModel.tree ?? false;\n    const transclusion =\n      activeInline && getContainingTransclusion(activeInline);\n    return new SimpleCommandBundle('Choose command...', [\n      {\n        description: 'Find, Open, Create...',\n        execute: async () => {\n          return new BlockCommandBundle(\n            'Find, Open, Create',\n            this.library,\n            async ({document, root}) =>\n              void this.navigate(document, root, true),\n            async ({name}) => void this.createAndNavigateByName(name, true)\n          );\n        },\n      },\n      {\n        description: 'Sync all',\n        execute: async () => void (await this.library.sync()),\n      },\n      {\n        description: 'Force save',\n        execute: async () => void this.document?.save(),\n      },\n      {\n        description: 'Copy all as markdown',\n        execute: async () => {\n          const markdown = serializeToString(this.document!.tree.root);\n          copyMarkdownToClipboard(markdown);\n          return undefined;\n        },\n      },\n      ...(this.document && this.root === this.document.tree.root\n        ? [\n            {\n              description: 'Delete document',\n              execute: async () => {\n                return new SimpleCommandBundle('Delete document?', [\n                  {\n                    description: 'No',\n                    execute: async () => void 0,\n                  },\n                  {\n                    description: 'Yes',\n                    execute: async () => {\n                      const tree = this.document!.tree;\n                      const document = this.library.getDocumentByTree(tree);\n                      await document?.delete();\n                      await this.navigateByName('index', true);\n                      return undefined;\n                    },\n                  },\n                ]);\n              },\n            },\n          ]\n        : []),\n      ...(activeInline?.hostContext?.hasSelection\n        ? [\n            {\n              description: 'Send to...',\n              execute: async () => {\n                return new BlockCommandBundle(\n                  'Send to',\n                  this.library,\n                  async (result) =>\n                    void sendTo(\n                      result,\n                      this.library,\n                      activeInline.hostContext!,\n                      'remove'\n                    ),\n                  async (result) =>\n                    void sendTo(\n                      result,\n                      this.library,\n                      activeInline.hostContext!,\n                      'remove'\n                    )\n                );\n              },\n            },\n            {\n              description: 'Send to and transclude...',\n              execute: async () => {\n                return new BlockCommandBundle(\n                  'Send to and transclude',\n                  this.library,\n                  async (result) =>\n                    void sendTo(\n                      result,\n                      this.library,\n                      activeInline.hostContext!,\n                      'transclude'\n                    ),\n                  async (result) =>\n                    void sendTo(\n                      result,\n                      this.library,\n                      activeInline.hostContext!,\n                      'transclude'\n                    )\n                );\n              },\n            },\n            {\n              description: 'Send to and link...',\n              execute: async () => {\n                return new BlockCommandBundle(\n                  'Send to and link',\n                  this.library,\n                  async (result) =>\n                    void sendTo(\n                      result,\n                      this.library,\n                      activeInline.hostContext!,\n                      'link'\n                    ),\n                  async (result) =>\n                    void sendTo(\n                      result,\n                      this.library,\n                      activeInline.hostContext!,\n                      'link'\n                    )\n                );\n              },\n            },\n          ]\n        : []),\n      {\n        description: 'Backlinks',\n        execute: async () => {\n          const action = async (command: Command) =>\n            void this.navigateByName(command.description, true);\n          const commands = this.library.backLinks\n            .getBacklinksByDocument(this.document!, this.library)\n            .map((name) => ({\n              description: name,\n              execute: action,\n            }));\n          return new SimpleCommandBundle('Open Backlink', commands);\n        },\n      },\n      ...(activeNode && startIndex !== undefined && endIndex !== undefined\n        ? [\n            {\n              description: 'Paste as markdown',\n              execute: async () => {\n                this.triggerPaste(\n                  activeInline,\n                  activeNode,\n                  {startIndex, oldEndIndex: endIndex},\n                  true\n                );\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(inTopLevelDocument && activeNode && activeInline\n        ? [\n            {\n              description: 'Focus on block',\n              execute: async () => {\n                this.root = isLogicalContainingBlock(activeNode)\n                  ? activeNode\n                  : getLogicalContainingBlock(activeNode);\n                focusNode(\n                  cast(activeInline.hostContext),\n                  activeNode,\n                  startIndex\n                );\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(inTopLevelDocument && this.root !== this.document?.tree.root\n        ? [\n            {\n              description: 'Focus on containing block',\n              execute: async () => {\n                if (this.root?.viewModel.parent)\n                  this.root = getLogicalContainingBlock(\n                    this.root.viewModel.parent\n                  );\n                if (activeNode && activeInline)\n                  focusNode(\n                    cast(activeInline.hostContext),\n                    activeNode,\n                    startIndex\n                  );\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(inTopLevelDocument && this.root !== this.document?.tree.root\n        ? [\n            {\n              description: 'Focus on document',\n              execute: async () => {\n                this.root = this.document?.tree.root;\n                if (activeNode)\n                  focusNode(\n                    cast(activeInline.hostContext),\n                    activeNode,\n                    startIndex\n                  );\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(transclusion\n        ? [\n            {\n              description: 'Delete transclusion',\n              execute: async () => {\n                const finished = transclusion.node!.viewModel.tree.edit();\n                transclusion.node!.viewModel.remove();\n                finished();\n                // TODO: focus\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(activeNode\n        ? [\n            {\n              description: 'Insert transclusion...',\n              execute: async () => {\n                const action = async ({name}: {name: string}) => {\n                  const finished = activeNode.viewModel.tree.edit();\n                  const newParagraph = activeNode.viewModel.tree.add({\n                    type: 'code-block',\n                    info: 'tc',\n                    content: name,\n                  });\n                  newParagraph.viewModel.insertBefore(\n                    cast(activeNode.viewModel.parent),\n                    activeNode.viewModel.nextSibling\n                  );\n                  finished();\n                  focusNode(activeInline.hostContext!, newParagraph);\n                  return undefined;\n                };\n                return new BlockCommandBundle(\n                  'Insert transclusion',\n                  this.library,\n                  action,\n                  action\n                );\n              },\n            },\n          ]\n        : []),\n      ...(transclusion\n        ? [\n            {\n              description: 'Insert before transclusion',\n              execute: async () => {\n                const node = transclusion.node!;\n                const finished = node.viewModel.tree.edit();\n                const newParagraph = node.viewModel.tree.add({\n                  type: 'paragraph',\n                  content: '',\n                });\n                newParagraph.viewModel.insertBefore(\n                  cast(node.viewModel.parent),\n                  node\n                );\n                finished();\n                focusNode(cast(transclusion.hostContext), newParagraph, 0);\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(transclusion\n        ? [\n            {\n              description: 'Insert after transclusion',\n              execute: async () => {\n                const node = transclusion.node!;\n                const finished = node.viewModel.tree.edit();\n                const newParagraph = node.viewModel.tree.add({\n                  type: 'paragraph',\n                  content: '',\n                });\n                newParagraph.viewModel.insertBefore(\n                  cast(node.viewModel.parent),\n                  node.viewModel.nextSibling\n                );\n                finished();\n                focusNode(cast(transclusion.hostContext), newParagraph, 0);\n                return undefined;\n              },\n            },\n          ]\n        : []),\n      ...(activeInline?.hostContext?.hasSelection\n        ? getLanguageTools(() => serializeSelection(activeInline.hostContext!))\n        : []),\n    ]);\n  }\n}\n\nfunction performLogicalInsertion(\n  context: ViewModelNode,\n  nodes: ViewModelNode[]\n) {\n  let {parent, nextSibling} = nextLogicalInsertionPoint(context);\n  if (context.type === 'section') {\n    // Insertion into a section is append-only. Mainly so that send-to section\n    // is sensible.\n    parent = context;\n    nextSibling = undefined;\n    for (const node of nodes) {\n      if (node.type === 'section') {\n        const list = parent.viewModel.tree.add({type: 'list'});\n        const listItem = parent.viewModel.tree.add({\n          type: 'list-item',\n          marker: '* ',\n        });\n        list.viewModel.insertBefore(parent, nextSibling);\n        listItem.viewModel.insertBefore(list);\n        parent = listItem;\n        nextSibling = undefined;\n        break;\n      }\n    }\n  } else if (parent.type == 'list') {\n    if (nodes.length === 1 && nodes[0].type === 'list') {\n      const [node] = nodes;\n      nodes = [...children(node)];\n    } else {\n      const listItem = parent.viewModel.tree.add({\n        type: 'list-item',\n        // TODO: infer from list\n        marker: '* ',\n      });\n      listItem.viewModel.insertBefore(parent, nextSibling);\n      parent = listItem;\n      nextSibling = undefined;\n    }\n  }\n  for (const node of nodes) {\n    node.viewModel.insertBefore(parent, nextSibling);\n  }\n}\n\nfunction nextLogicalInsertionPoint(node: ViewModelNode) {\n  if (\n    !node.viewModel.nextSibling &&\n    node.viewModel.parent?.type === 'list-item'\n  ) {\n    const listItem = node.viewModel.parent;\n    return {\n      parent: cast(listItem.viewModel.parent),\n      nextSibling: listItem.viewModel.nextSibling,\n    };\n  }\n  return {\n    parent: cast(node.viewModel.parent),\n    nextSibling: node.viewModel.nextSibling,\n  };\n}\n\nfunction maybeMergeContentInto(\n  node: InlineNode & ViewModelNode,\n  target: ViewModelNode,\n  context: HostContext\n): boolean {\n  if (\n    target.type === 'code-block' ||\n    target.type === 'paragraph' ||\n    target.type === 'section'\n  ) {\n    focusNode(context, target, target.content.length);\n    (target.viewModel as InlineViewModel).edit({\n      startIndex: target.content.length,\n      oldEndIndex: target.content.length,\n      newEndIndex: target.content.length + node.content.length,\n      newText: node.content,\n    });\n    node.viewModel.remove();\n    return true;\n  }\n  return false;\n}\n\nfunction insertSiblingParagraph(\n  node: InlineNode & ViewModelNode,\n  root: ViewModelNode,\n  startIndex: number,\n  context: HostContext\n): boolean {\n  const newParagraph = node.viewModel.tree.add({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(\n    cast(node.viewModel.parent),\n    node.viewModel.nextSibling\n  );\n  finishInsertParagraph(node, newParagraph, root, startIndex, context);\n  return true;\n}\n\nfunction insertParagraphInList(\n  node: InlineNode & ViewModelNode,\n  root: ViewModelNode,\n  startIndex: number,\n  context: HostContext\n): boolean {\n  const {ancestor, path} = findAncestor(node, root, 'list');\n  if (!ancestor) return false;\n  let targetList;\n  let targetListItemNextSibling;\n  if (node.viewModel.nextSibling) {\n    if (node.viewModel.nextSibling.type === 'list') {\n      targetList = node.viewModel.nextSibling;\n      targetListItemNextSibling = targetList.viewModel.firstChild;\n    } else {\n      targetList = node.viewModel.tree.add({\n        type: 'list',\n      });\n      targetList.viewModel.insertBefore(\n        cast(node.viewModel.parent),\n        node.viewModel.nextSibling\n      );\n      targetListItemNextSibling = undefined;\n    }\n  } else {\n    targetList = ancestor;\n    targetListItemNextSibling = path[0].viewModel.nextSibling;\n  }\n\n  const firstListItem = targetList.viewModel.firstChild;\n  if (firstListItem && firstListItem.type !== 'list-item') return false;\n  const newListItem = node.viewModel.tree.add({\n    type: 'list-item',\n    marker: firstListItem?.marker ?? '* ',\n  });\n  newListItem.viewModel.insertBefore(targetList, targetListItemNextSibling);\n  if (\n    newListItem.viewModel.previousSibling?.type === 'list-item' &&\n    newListItem.viewModel.previousSibling.checked !== undefined\n  ) {\n    newListItem.viewModel.updateChecked(false);\n  }\n  const newParagraph = node.viewModel.tree.add({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(newListItem);\n  finishInsertParagraph(node, newParagraph, root, startIndex, context);\n  return true;\n}\n\n/**\n * Special case where we have a list-item that is not contained by a list\n * (because it is the root).\n */\nfunction insertParagraphInListItem(\n  node: InlineNode & ViewModelNode,\n  root: ViewModelNode,\n  startIndex: number,\n  context: HostContext\n): boolean {\n  const {ancestor: listItem, path} = findAncestor(node, root, 'list-item');\n  if (!listItem) return false;\n  const newParagraph = node.viewModel.tree.add({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(listItem, path[0].viewModel.nextSibling);\n  finishInsertParagraph(node, newParagraph, root, startIndex, context);\n  return true;\n}\n\nfunction insertParagraphInDocument(\n  node: InlineNode & ViewModelNode,\n  root: ViewModelNode,\n  startIndex: number,\n  context: HostContext\n): boolean {\n  const {ancestor: section, path} = findAncestor(node, root, 'document');\n  if (!section) return false;\n  const newParagraph = node.viewModel.tree.add({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(section, path[0].viewModel.nextSibling);\n  finishInsertParagraph(node, newParagraph, root, startIndex, context);\n  return true;\n}\n\nfunction insertParagraphInSection(\n  node: InlineNode & ViewModelNode,\n  root: ViewModelNode,\n  startIndex: number,\n  context: HostContext\n): boolean {\n  let {ancestor: section, path} = findAncestor(node, root, 'section');\n  let nextSibling;\n  if (section) {\n    nextSibling = path![0].viewModel.nextSibling;\n  }\n  if (node.type === 'section') {\n    section = node;\n    nextSibling = section!.viewModel.firstChild;\n  }\n  if (!section) return false;\n  const newParagraph = node.viewModel.tree.add({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(section, nextSibling);\n  finishInsertParagraph(node, newParagraph, root, startIndex, context);\n  return true;\n}\n\nfunction areAncestorAndDescendant(\n  node: ViewModelNode,\n  node2: ViewModelNode,\n  root: ViewModelNode\n) {\n  return (\n    [...ancestors(node, root)].includes(node2) ||\n    [...ancestors(node2, root)].includes(node)\n  );\n}\n\nfunction finishInsertParagraph(\n  node: InlineNode & ViewModelNode,\n  newParagraph: ParagraphNode & ViewModelNode,\n  root: ViewModelNode,\n  startIndex: number,\n  context: HostContext\n) {\n  const shouldSwap =\n    startIndex === 0 &&\n    node.content.length > 0 &&\n    !areAncestorAndDescendant(node, newParagraph, root);\n  if (shouldSwap) {\n    swapNodes(node, newParagraph);\n  } else {\n    (newParagraph.viewModel as InlineViewModel).edit({\n      startIndex: 0,\n      newEndIndex: 0,\n      oldEndIndex: 0,\n      newText: node.content.substring(startIndex),\n    });\n\n    (node.viewModel as InlineViewModel).edit({\n      startIndex,\n      oldEndIndex: node.content.length,\n      newEndIndex: startIndex,\n      newText: '',\n    });\n  }\n  focusNode(context, newParagraph);\n}\n\nfunction handleInlineInputAsBlockEdit(\n  {\n    detail: {inline, inputEvent, inputStart, inputEnd},\n  }: CustomEvent<InlineInput>,\n  context: HostContext\n): boolean {\n  if (!inline.node) return false;\n  const root = cast(context.root);\n  if (inputEvent.inputType === 'deleteContentBackward') {\n    if (inputStart.index !== 0 || inputEnd.index !== 0) return false;\n    const node = inline.node;\n    // Turn sections and code-blocks into paragraphs.\n    if (node.type === 'section') {\n      node.viewModel.updateMarker(\n        node.marker.substring(0, node.marker.length - 1)\n      );\n      if (node.marker === '') {\n        const paragraph = node.viewModel.tree.add({\n          type: 'paragraph',\n          content: node.content,\n        });\n        paragraph.viewModel.insertBefore(cast(node.viewModel.parent), node);\n        // Move all section content out.\n        for (const child of children(node)) {\n          child.viewModel.insertBefore(cast(node.viewModel.parent), node);\n        }\n        node.viewModel.remove();\n        focusNode(context, paragraph, 0);\n      } else {\n        focusNode(context, node, 0);\n      }\n      return true;\n    } else if (node.type === 'code-block') {\n      const paragraph = node.viewModel.tree.add({\n        type: 'paragraph',\n        content: node.content, // TODO: detect new blocks\n      });\n      paragraph.viewModel.insertBefore(cast(node.viewModel.parent), node);\n      node.viewModel.remove();\n      focusNode(context, paragraph, 0);\n      return true;\n    }\n\n    // Remove a surrounding block-quote.\n    const {ancestor} = findAncestor(node, root, 'block-quote');\n    if (ancestor) {\n      // Unless there's an earlier opportunity to merge into a previous\n      // content node.\n      for (const prev of reverseDfs(node, ancestor)) {\n        if (maybeMergeContentInto(node, prev, context)) return true;\n      }\n      for (const child of [...children(ancestor)]) {\n        child.viewModel.insertBefore(cast(ancestor.viewModel.parent), ancestor);\n      }\n      ancestor.viewModel.remove();\n      focusNode(context, node);\n      return true;\n    }\n\n    // Merge into a previous content node.\n    for (const prev of reverseDfs(node)) {\n      if (maybeMergeContentInto(node, prev, context)) return true;\n    }\n  } else if (inputEvent.inputType === 'insertParagraph') {\n    return (\n      insertParagraphInList(inline.node, root, inputStart.index, context) ||\n      insertParagraphInListItem(inline.node, root, inputStart.index, context) ||\n      insertParagraphInSection(inline.node, root, inputStart.index, context) ||\n      insertParagraphInDocument(inline.node, root, inputStart.index, context)\n    );\n  } else if (inputEvent.inputType === 'insertLineBreak') {\n    return insertSiblingParagraph(inline.node, root, inputStart.index, context);\n  }\n  return false;\n}\n\nasync function sendTo(\n  {root, name}: {root?: ViewModelNode; name: string},\n  library: Library,\n  hostContext: HostContext,\n  mode: 'remove' | 'transclude' | 'link'\n) {\n  if (!root) {\n    // TODO: We shouldn't need to make the call here, but TS can't\n    // figure out `root` that root is defined if we reassign it...\n    const root = (await library.newDocument(name)).tree.root;\n    sendTo({root, name}, library, hostContext, mode);\n    return;\n  }\n  const markdown = serializeSelection(hostContext);\n  insertMarkdown(markdown, root.viewModel.lastChild ?? root);\n  const focus = cast(hostContext.selectionFocus);\n  // TODO: if the selection is a section, use that section's name\n  const targetName = name;\n  let replacement;\n  switch (mode) {\n    case 'remove':\n      break;\n    case 'transclude':\n      replacement = focus.viewModel.tree.add({\n        type: 'code-block',\n        info: 'tc',\n        content: targetName,\n      });\n      break;\n    case 'link':\n      replacement = focus.viewModel.tree.add({\n        type: 'paragraph',\n        content: `[${targetName}]`,\n      });\n      break;\n  }\n  const finish = focus.viewModel.tree.edit();\n  try {\n    replacement?.viewModel.insertBefore(cast(focus.viewModel.parent), focus);\n    maybeRemoveSelectedNodesIn(hostContext);\n  } finally {\n    finish();\n  }\n}\n\nfunction insertMarkdown(markdown: string, node: ViewModelNode) {\n  const {node: root} = parseBlocks(markdown + '\\n');\n  if (!root) return;\n  assert(root.type === 'document' && root.children);\n  const finishEditing = node.viewModel.tree.edit();\n  try {\n    const newNodes = root.children.map((newNode) =>\n      node.viewModel.tree.add<MarkdownNode>(newNode)\n    );\n    let newFocus = findFinalEditable(newNodes[0]);\n    performLogicalInsertion(node, newNodes);\n    return newFocus;\n  } finally {\n    finishEditing();\n  }\n}\n\nfunction copyMarkdownToClipboard(markdown: string) {\n  const textType = 'text/plain';\n  const mdType = 'web text/markdown';\n  navigator.clipboard.write([\n    new ClipboardItem({\n      [textType]: new Blob([markdown], {type: textType}),\n      [mdType]: new Blob([markdown], {type: mdType}),\n    }),\n  ]);\n}\n\nfunction serializeSelection(hostContext: HostContext) {\n  // This is complex because:\n  // 1. Sections can be disjoint.\n  // 2. Expecations of what to serialize is different to the set of selected\n  //    nodes. For example, if the selection is a paragaph immediately inside\n  //    a list-item, we should serialize the list-item too.\n  // The approach here is:\n  // 1. Recursively expand the selection to include ancestor nodes, when the\n  //    selected node is the first child.\n  // 2. Combine the selected nodes when one is an ancestor of another.\n  // 3. Clone the selected nodes, removing any inline nodes that were not\n  //    part of the original selection.\n  // 4. Build a new document, append the clones (triggering normalization)\n  // 5. Serialize the new document.\n  const expand = (node: ViewModelNode) => {\n    let result = node;\n    if (node.viewModel.previousSibling) {\n      return result;\n    }\n    for (const ancestor of ancestors(node, hostContext.root!)) {\n      if (ancestor.type === 'section') {\n        break;\n      }\n      result = ancestor;\n      if (ancestor.viewModel.previousSibling) {\n        break;\n      }\n    }\n    return result;\n  };\n  const predicate = (node: ViewModelNode) => {\n    switch (node.type) {\n      case 'section':\n      case 'paragraph':\n      case 'code-block':\n        return hostContext.selection.has(node);\n      case 'unsupported':\n        return false;\n      default:\n        return true;\n    }\n  };\n  const roots = removeDescendantNodes(\n    [...hostContext.selection.values()].map(expand)\n  ).map((node) => cloneNode(node, predicate));\n  const tree = new MarkdownTree({\n    type: 'document',\n  });\n  const finishEditing = tree.edit();\n  for (const root of roots) {\n    const node = tree.add<MarkdownNode>(root);\n    node.viewModel.insertBefore(tree.root);\n  }\n  finishEditing();\n  return serializeToString(tree.root);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pkm-editor': Editor;\n  }\n  interface HTMLElementEventMap {\n    'editor-navigate': CustomEvent<EditorNavigation>;\n    'editor-commands': CustomEvent<CommandBundle>;\n  }\n}\n"]}