{"version":3,"file":"block-util.js","sourceRoot":"","sources":["../src/block-util.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAIjC,MAAM,UAAU,wBAAwB,CAAC,IAAoB;IAC3D,QAAQ,IAAI,EAAE,IAAI,EAAE;QAClB,KAAK,SAAS;YACZ,IACE,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe;gBAC/B,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,KAAK,WAAW;oBAC1C,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,KAAK,UAAU,CAAC;gBAE7C,OAAO,KAAK,CAAC;YACf,OAAO,IAAI,CAAC;QACd,KAAK,WAAW,CAAC;QACjB,KAAK,UAAU;YACb,OAAO,IAAI,CAAC;QACd;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAoB;IAC5D,IAAI,IAAI,GAAG,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC;IAClC,OAAO,IAAI,EAAE;QACX,IAAI,wBAAwB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QAChD,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;KAC9B;IACD,OAAO;AACT,CAAC","sourcesContent":["// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ViewModelNode} from './markdown/view-model.js';\n\nexport function isLogicalContainingBlock(node?: ViewModelNode) {\n  switch (node?.type) {\n    case 'section':\n      if (\n        !node.viewModel.previousSibling &&\n        (node.viewModel.parent?.type === 'list-item' ||\n          node.viewModel.parent?.type === 'document')\n      )\n        return false;\n      return true;\n    case 'list-item':\n    case 'document':\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function getLogicalContainingBlock(node?: ViewModelNode) {\n  let next = node?.viewModel.parent;\n  while (next) {\n    if (isLogicalContainingBlock(next)) return next;\n    next = next.viewModel.parent;\n  }\n  return;\n}\n"]}