{"version":3,"file":"block-parser.js","sourceRoot":"","sources":["../../src/markdown/block-parser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Parser from '../deps/tree-sitter.js';\nimport type {MarkdownNode, ParagraphNode} from './node.js';\nimport {resolve} from '../resolve.js';\n\nawait Parser.init({\n  locateFile(path: string) {\n    return resolve(`./deps/${path}`);\n  }\n});\nconst blocks = await Parser.Language.load(resolve('./deps/tree-sitter-markdown.wasm'));\nconst parser = new Parser();\nparser.setLanguage(blocks);\n\nexport function parseBlocks(markdown: string) {\n  const tree = parser.parse(markdown);\n  return convertNode(tree.rootNode);\n}\n\nfunction*\n    convertNodes(nodes: Parser.SyntaxNode[]): IterableIterator<MarkdownNode> {\n  for (const node of nodes) {\n    const result = convertNode(node);\n    if (result) yield result;\n  }\n}\n\nconst emptyParagraph: ParagraphNode = {\n  type: 'paragraph',\n  content: '',\n};\n\nfunction ensureContent(\n    children: MarkdownNode[],\n    result: MarkdownNode[] = [{...emptyParagraph}]): MarkdownNode[] {\n  if (children.length) return children;\n  return result;\n}\n\nfunction convertNode(node: Parser.SyntaxNode): MarkdownNode|undefined {\n  switch (node.type) {\n    case 'document': {\n      let children = node.namedChildren;\n      const section = children[0];\n      if (section?.type === 'section') {\n        const sectionChildren = section.namedChildren;\n        if (!sectionChildren.length) {\n          children = children.slice(1);\n        } else if (sectionChildren[0].type !== 'atx_heading') {\n          children = [\n            ...sectionChildren,\n            ...children.slice(1),\n          ];\n        }\n      }\n      return {\n        type: 'document',\n        children:\n            ensureContent([...convertNodes(children)], [{...emptyParagraph}]),\n      };\n    }\n    case 'section': {\n      const children = node.namedChildren;\n      const heading = children[0];\n      const marker = heading.children[0].text;\n      const content = heading.children[1]?.text.trimStart() ?? '';\n      return {\n        type: 'section',\n        marker,\n        content,\n        children: [...convertNodes(node.namedChildren)],\n      };\n    }\n    case 'paragraph':\n      return {\n        type: 'paragraph',\n        content: node.firstChild!.text,\n      };\n    case 'list':\n      return {\n        type: 'list',\n        children: [...convertNodes(node.namedChildren)],\n      };\n    case 'list_item': {\n      const children = node.namedChildren;\n      let marker = children[0].text;\n      if (!marker.endsWith(' ')) {\n        marker += ' ';\n      }\n      let checked: boolean|undefined;\n      if (children[1]?.type === 'task_list_marker_unchecked') checked = false;\n      if (children[1]?.type === 'task_list_marker_checked') checked = true;\n      return {\n        type: 'list-item',\n        marker,\n        checked,\n        children: ensureContent([...convertNodes(children)]),\n      };\n    }\n    case 'block_quote': {\n      const children = node.namedChildren;\n      const marker = children[0].text;\n      return {\n        type: 'block-quote',\n        marker,\n        children: ensureContent([...convertNodes(children)]),\n      };\n    }\n    case 'fenced_code_block': {\n      const children = node.namedChildren;\n      const info = children.find((node) => node.type === 'info_string');\n      const content =\n          children.find((node) => node.type === 'code_fence_content');\n      const offset = content?.startPosition.column ?? 0;\n      const prefix = new RegExp(`(?<=\\n).{${offset}}`, 'g');\n      return {\n        type: 'code-block',\n        info: info?.text ?? null,\n        content: content?.text.replace(prefix, '').trimEnd() ?? '',\n      };\n    }\n    case 'atx_heading':\n    case 'block_continuation':\n    case 'list_marker_star':\n    case 'list_marker_minus':\n    case 'list_marker_dot':\n    case 'list_marker_parenthesis':\n    case 'list_marker_plus':\n    case 'block_quote_marker':\n    case 'task_list_marker_unchecked':\n    case 'task_list_marker_checked':\n      return undefined;\n    case 'setext_heading':\n    case 'thematic_break':\n    case 'indented_code_block':\n    case 'html_block':\n    case 'minus_metadata':\n    case 'link_reference_definition':\n    case 'pipe_table':\n      return {\n        type: 'unsupported',\n        content: node.text,\n        parser_type: node.type,\n      };\n    default:\n      console.error(node.type);\n      return undefined;\n  }\n}\n"]}