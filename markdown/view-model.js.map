{"version":3,"file":"view-model.js","sourceRoot":"","sources":["../../src/markdown/view-model.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {MarkdownNode, InlineNode} from './node.js';\n\nimport {parser as inlineParser} from './inline-parser.js';\nimport {parseBlocks} from './block-parser.js';\nimport Parser from 'web-tree-sitter';\nimport {assert, cast} from '../asserts.js';\n\nclass Observe<T> {\n  private observers = new Set<(target: T) => void>();\n  constructor(readonly target: T) {}\n  notify() {\n    for (const observer of this.observers.values()) {\n      observer(this.target);\n    }\n  }\n  add(observer: (node: T) => void) {\n    this.observers.add(observer);\n  }\n  remove(observer: (node: T) => void) {\n    this.observers.delete(observer);\n  }\n}\n\nclass ViewModel {\n  constructor(\n      readonly self: ViewModelNode, readonly tree: MarkdownTree,\n      public parent?: ViewModelNode, childIndex?: number) {\n    this.initialize(parent, childIndex);\n  }\n  private initialize(parent?: ViewModelNode, childIndex?: number) {\n    this.parent = parent;\n    this.previousSibling = undefined;\n    this.nextSibling = undefined;\n    if (parent && childIndex !== undefined) {\n      if (childIndex > 0) {\n        this.previousSibling = parent.children?.[childIndex - 1];\n      }\n      this.nextSibling = parent.children?.[childIndex + 1];\n    }\n    this.firstChild = this.self.children?.[0];\n    this.lastChild = this.self.children?.[this.self.children.length - 1];\n  }\n  firstChild?: ViewModelNode;\n  lastChild?: ViewModelNode;\n  nextSibling?: ViewModelNode;\n  previousSibling?: ViewModelNode;\n  readonly observe = new Observe(this.self);\n  remove() {\n    if (this.parent?.viewModel.firstChild === this.self) {\n      this.parent.viewModel.firstChild = this.nextSibling;\n    }\n    if (this.parent?.viewModel.lastChild === this.self) {\n      this.parent.viewModel.lastChild = this.previousSibling;\n    }\n    if (this.previousSibling) {\n      this.previousSibling.viewModel.nextSibling = this.nextSibling;\n    }\n    if (this.nextSibling) {\n      this.nextSibling.viewModel.previousSibling = this.previousSibling;\n    }\n    const index = this.parent!.children!.indexOf(this.self);\n    this.parent!.children!.splice(index, 1);\n    this.parent!.viewModel.observe.notify();\n    this.parent = undefined;\n    this.tree.observe.notify();\n  }\n\n  insertBefore(parent: ViewModelNode, nextSibling?: ViewModelNode) {\n    if (this.parent) this.remove();\n    const previousSibling = nextSibling ?\n        nextSibling?.viewModel.previousSibling :\n        parent.viewModel.lastChild;\n\n    this.parent = parent;\n    this.previousSibling = previousSibling;\n    this.nextSibling = nextSibling;\n\n    if (previousSibling) {\n      previousSibling.viewModel.nextSibling = this.self;\n    } else {\n      parent.viewModel.firstChild = this.self;\n    }\n    if (nextSibling) {\n      nextSibling.viewModel.previousSibling = this.self;\n    } else {\n      parent.viewModel.lastChild = this.self;\n    }\n    if (!parent.children) {\n      parent.children = [];\n    }\n    let index: number;\n    if (previousSibling) {\n      index = parent.children.indexOf(previousSibling) + 1;\n    } else if (nextSibling) {\n      index = parent.children.indexOf(nextSibling);\n    } else {\n      index = 0;\n    }\n    parent.children.splice(index, 0, this.self);\n    parent.viewModel.observe.notify();\n    this.tree.observe.notify();\n  }\n}\n\nexport class InlineViewModel extends ViewModel {\n  constructor(\n      self: InlineNode&ViewModelNode, tree: MarkdownTree,\n      parent?: ViewModelNode, childIndex?: number) {\n    super(self, tree, parent, childIndex);\n    this.inlineTree = inlineParser.parse(self.content);\n  }\n  inlineTree: Parser.Tree;\n  override self!: InlineNode&ViewModelNode;\n  edit({startIndex, newEndIndex, oldEndIndex, newText}: InlineEdit) {\n    const oldText = this.self.content.substring(startIndex, oldEndIndex);\n    const result = {\n      oldText,\n      newText,\n      startIndex,\n      startPosition: indexToPosition(this.self.content, startIndex),\n      oldEndIndex,\n      oldEndPosition: indexToPosition(this.self.content, oldEndIndex),\n      newEndIndex,\n      newEndPosition: indexToPosition(this.self.content, newEndIndex),\n    };\n\n    this.self.content = apply(this.self.content, result);\n    const newNodes = this.maybeReplaceWithBlocks();\n    if (newNodes) return newNodes;\n    this.tree.observe.notify();\n    this.inlineTree = this.inlineTree!.edit(result);\n    this.inlineTree = inlineParser.parse(this.self.content, this.inlineTree);\n    this.observe.notify();\n    return null;\n  }\n  private maybeReplaceWithBlocks() {\n    const blocks = this.parseAsBlocks();\n    if (!blocks) return false;\n    const newNodes: ViewModelNode[] = [];\n    for (const child of blocks) {\n      const node = this.tree.import<MarkdownNode>(child);\n      node.viewModel.insertBefore(cast(this.parent), this.nextSibling);\n      newNodes.push(node);\n      \n    }\n    this.remove();\n    return newNodes;\n  }\n  private parseAsBlocks() {\n    // TODO: Ensure there's a trailing new line.\n    // TODO: Have a fast path to early exit without invoking the parser.\n    if (this.self.type !== 'paragraph') return;\n    const node = parseBlocks(this.self.content + '\\n');\n    assert(node);\n    assert(node.type === 'document' && node.children);\n    if (node.children.length > 1) {\n      return node.children;\n    }\n    const section = node.children[0];\n    assert(section.type === 'section' && section.children);\n    if (section.children.length > 1 ||\n        section.children[0].type !== this.self.type) {\n      return section.children;\n    }\n    return;\n  }\n}\n\n\nexport class MarkdownTree {\n  constructor(root: MarkdownNode) {\n    this.root = this.addDom<MarkdownNode>(root);\n  }\n  root: ViewModelNode;\n  readonly observe = new Observe(this);\n\n  import<T>(node: T&MarkdownNode) {\n    if ((node as MaybeViewModelNode).viewModel) {\n      throw new Error('node is already part of a tree');\n    }\n    return this.addDom(node);\n  }\n\n  private addDom<T>(\n    node: T&MarkdownNode,\n    parent?: ViewModelNode,\n    childIndex?: number\n  ) {\n    const result = node as T&ViewModelNode;\n    if (result.type === 'paragraph' || result.type === 'heading' || result.type === 'code-block') {\n      assert(!result.viewModel);\n      result.viewModel = new InlineViewModel(result, this, parent, childIndex);\n    } else {\n      assert(!result.viewModel);\n      result.viewModel = new ViewModel(result, this, parent, childIndex);\n    }\n    if (result.children) {\n    for (let i = 0; i < result.children.length; i++) {\n      this.addDom(result.children[i], result, i);\n    }\n    }\n    return result;\n  }\n\n  serialize(node?: ViewModelNode): MarkdownNode {\n    if (!node) node = this.root;\n    const result: MaybeViewModelNode = {...node};\n    delete result.viewModel;\n    result.children = node.children?.map(this.serialize);\n    return result;\n  }\n}\n\nexport type MaybeViewModelNode = MarkdownNode & {\n  viewModel?: ViewModel;\n  children?: MarkdownNode[];\n};\n\nexport type ViewModelNode = MarkdownNode&{\n  viewModel: ViewModel;\n  children?: ViewModelNode[];\n};\n\nexport type InlineViewModelNode = InlineNode&{\n  viewModel: InlineViewModel;\n  children?: ViewModelNode[];\n};\n\ninterface Position {\n  row: number;\n  column: number;\n}\n\nfunction indexToPosition(text: string, index: number): Position {\n  let row = 1;\n  let column = 1;\n  for (let i = 0; i < index; i++) {\n    if (text[i] === '\\n') {\n      row++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return {row, column};\n}\n\ninterface Edit {\n  startIndex: number;\n  startPosition: Position;\n  newEndIndex: number;\n  newEndPosition: Position;\n  oldEndIndex: number;\n  oldEndPosition: Position;\n  newText?: string;\n}\n\nfunction apply(text: string, edit: Edit) {\n  return (\n      text.substring(0, edit.startIndex) + (edit.newText ?? '') +\n      text.substring(edit.oldEndIndex));\n}\n\ninterface InlineEdit {\n  newText: string;\n  startIndex: number;\n  oldEndIndex: number;\n  newEndIndex: number;\n}\n"]}