{"version":3,"file":"view-model.js","sourceRoot":"","sources":["../../src/markdown/view-model.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {MarkdownNode, DocumentNode, InlineNode} from './node.js';\n\nimport {parser as inlineParser} from './inline-parser.js';\nimport {parseBlocks} from './block-parser.js';\nimport Parser from 'web-tree-sitter';\nimport {assert, cast} from '../asserts.js';\nimport {Observe} from '../observe.js';\nimport {normalizeTree} from './normalize.js';\nimport {dfs} from './view-model-util.js';\n\nclass ViewModel {\n  constructor(\n    readonly self: ViewModelNode,\n    readonly tree: MarkdownTree,\n    public parent?: ViewModelNode,\n    childIndex?: number,\n    public connected = false\n  ) {\n    this.initialize(parent, childIndex);\n    this.observe = new Observe(this.self, this.tree.observe);\n  }\n  private initialize(parent?: ViewModelNode, childIndex?: number) {\n    this.parent = parent;\n    this.previousSibling = undefined;\n    this.nextSibling = undefined;\n    if (parent && childIndex !== undefined) {\n      if (childIndex > 0) {\n        this.previousSibling = parent.children?.[childIndex - 1];\n      }\n      this.nextSibling = parent.children?.[childIndex + 1];\n    }\n    this.firstChild = this.self.children?.[0];\n    this.lastChild = this.self.children?.[this.self.children.length - 1];\n  }\n  version = 0;\n  firstChild?: ViewModelNode;\n  lastChild?: ViewModelNode;\n  nextSibling?: ViewModelNode;\n  previousSibling?: ViewModelNode;\n  readonly observe;\n  protected signalMutation(notify = true) {\n    this.version = this.tree.root.viewModel.version + 1;\n    let parent = this.parent;\n    while (parent) {\n      parent.viewModel.version = this.version;\n      parent = parent.viewModel.parent;\n    }\n    if (notify) {\n      this.observe.notify();\n    }\n  }\n  remove() {\n    assert(this.tree.state === 'editing');\n    assert(this.parent);\n    if (this.parent?.viewModel.firstChild === this.self) {\n      this.parent.viewModel.firstChild = this.nextSibling;\n    }\n    if (this.parent?.viewModel.lastChild === this.self) {\n      this.parent.viewModel.lastChild = this.previousSibling;\n    }\n    if (this.previousSibling) {\n      this.previousSibling.viewModel.nextSibling = this.nextSibling;\n    }\n    if (this.nextSibling) {\n      this.nextSibling.viewModel.previousSibling = this.previousSibling;\n    }\n    const index = this.parent!.children!.indexOf(this.self);\n    this.parent!.children!.splice(index, 1);\n    if (!this.previousSibling)\n      this.parent.viewModel.firstChild = this.nextSibling;\n    if (!this.nextSibling)\n      this.parent.viewModel.lastChild = this.previousSibling;\n    const parent = this.parent;\n    this.signalMutation(false);\n    this.parent = undefined;\n    this.nextSibling = undefined;\n    this.previousSibling = undefined;\n    this.tree.removed.add(this.self);\n    parent.viewModel.observe.notify();\n  }\n\n  insertBefore(parent: ViewModelNode, nextSibling?: ViewModelNode) {\n    assert(this.tree.state === 'editing');\n    if (nextSibling === this.self) {\n      assert(parent === this.parent);\n      return;\n    }\n    if (this.parent) this.remove();\n    const previousSibling = nextSibling\n      ? nextSibling?.viewModel.previousSibling\n      : parent.viewModel.lastChild;\n\n    this.parent = parent;\n    this.previousSibling = previousSibling;\n    this.nextSibling = nextSibling;\n\n    if (previousSibling) {\n      previousSibling.viewModel.nextSibling = this.self;\n    } else {\n      parent.viewModel.firstChild = this.self;\n    }\n    if (nextSibling) {\n      nextSibling.viewModel.previousSibling = this.self;\n    } else {\n      parent.viewModel.lastChild = this.self;\n    }\n    if (!parent.children) {\n      parent.children = [];\n    }\n    let index: number;\n    if (previousSibling) {\n      index = parent.children.indexOf(previousSibling) + 1;\n    } else if (nextSibling) {\n      index = parent.children.indexOf(nextSibling);\n    } else {\n      index = 0;\n    }\n    parent.children.splice(index, 0, this.self);\n    this.signalMutation(false);\n    parent.viewModel.observe.notify();\n  }\n\n  updateMarker(marker: string) {\n    // TODO: assert tree editing\n    switch (this.self.type) {\n      case 'list-item':\n      case 'section':\n        if (this.self.marker === marker) return;\n        (this.self as {marker: string}).marker = marker;\n        this.signalMutation();\n        break;\n    }\n  }\n\n  updateChecked(checked: boolean | undefined) {\n    // TODO: assert tree editing\n    switch (this.self.type) {\n      case 'list-item':\n        if (this.self.checked === checked) return;\n        (this.self as {checked?: boolean}).checked = checked;\n        this.signalMutation();\n        break;\n    }\n  }\n}\n\nexport class InlineViewModel extends ViewModel {\n  constructor(\n    self: InlineNode & ViewModelNode,\n    tree: MarkdownTree,\n    parent?: ViewModelNode,\n    childIndex?: number\n  ) {\n    super(self, tree, parent, childIndex);\n    this.inlineTree = inlineParser.parse(self.content);\n    this.self = self;\n  }\n  inlineTree: Parser.Tree;\n  override self: InlineNode & ViewModelNode;\n  edit({startIndex, newEndIndex, oldEndIndex, newText}: InlineEdit) {\n    const oldText = this.self.content.substring(startIndex, oldEndIndex);\n    const result = {\n      oldText,\n      newText,\n      startIndex,\n      startPosition: indexToPosition(this.self.content, startIndex),\n      oldEndIndex,\n      oldEndPosition: indexToPosition(this.self.content, oldEndIndex),\n      newEndIndex,\n      newEndPosition: indexToPosition(this.self.content, newEndIndex),\n    };\n\n    const newContent = apply(this.self.content, result);\n    if (this.self.content === newContent) return null;\n    (this.self as {content: string}).content = newContent;\n    const newNodes = this.maybeReplaceWithBlocks();\n    if (newNodes) return newNodes;\n    this.inlineTree = this.inlineTree!.edit(result);\n    this.inlineTree = inlineParser.parse(this.self.content, this.inlineTree);\n    this.signalMutation();\n    return null;\n  }\n  private maybeReplaceWithBlocks() {\n    const blocks = this.parseAsBlocks();\n    if (!blocks) return false;\n    const newNodes: ViewModelNode[] = [];\n    for (const child of blocks) {\n      const node = this.tree.add<MarkdownNode>(child);\n      node.viewModel.insertBefore(cast(this.parent), this.nextSibling);\n      newNodes.push(node);\n    }\n    this.remove();\n    return newNodes;\n  }\n  private parseAsBlocks() {\n    const content = this.self.content;\n    // TODO: Ensure inline does not start with whitespace, or contain tabs or\n    // newlines.\n    // TODO: Support other block types.\n    if (!/^(\\d+[.)] |[-+*>] |#+ |[`*\\-_]{3})/.test(content)) return;\n    if (this.self.type !== 'paragraph') return;\n    // TODO: Ensure there's a trailing new line?\n    const {node} = parseBlocks(this.self.content + '\\n');\n    assert(node);\n    assert(node.type === 'document' && node.children);\n    return node.children;\n  }\n}\n\nexport interface MarkdownTreeDelegate {\n  postEditUpdate(\n    node: ViewModelNode,\n    change: 'connected' | 'disconnected' | 'changed'\n  ): void;\n}\n\nexport class MarkdownTree {\n  constructor(\n    root: DocumentNode,\n    private readonly delegate?: MarkdownTreeDelegate\n  ) {\n    this.root = this.addDom<DocumentNode>(root);\n    this.setRoot(this.root);\n  }\n\n  state: 'editing' | 'post-edit' | 'idle' = 'idle';\n  private editCount = 0;\n  private editStartVersion = 0;\n  private editResumeObserve: () => void = () => void 0;\n  root: ViewModelNode & DocumentNode;\n  readonly observe = new Observe(this);\n  removed: Set<ViewModelNode> = new Set();\n\n  setRoot(node: DocumentNode & ViewModelNode) {\n    assert(node.viewModel.tree === this);\n    assert(!node.viewModel.parent);\n    const finish = this.edit();\n    if (node !== this.root) {\n      this.removed.add(this.root);\n      this.root = node;\n    }\n    finish();\n  }\n\n  add<T>(node: T & MarkdownNode) {\n    if ((node as MaybeViewModelNode).viewModel) {\n      throw new Error('node is already part of a tree');\n    }\n    return this.addDom(node);\n  }\n\n  edit() {\n    if (this.state === 'idle') {\n      this.editStartVersion = this.root.viewModel.version;\n      this.editResumeObserve = this.observe.suspend();\n      this.state = 'editing';\n      this.removed.clear();\n    }\n    this.editCount++;\n    return () => this.finishEdit();\n  }\n  private finishEdit() {\n    assert(this.state === 'editing');\n    this.editCount--;\n    if (this.editCount > 0) return;\n    normalizeTree(this);\n    const removedRoots = new Set<ViewModelNode>();\n    for (const node of this.removed.values()) {\n      if (!node.viewModel.parent) {\n        removedRoots.add(node);\n      }\n    }\n    this.state = 'post-edit';\n    for (const root of removedRoots.values()) {\n      for (const node of dfs(root)) {\n        node.viewModel.connected = false;\n        this.delegate?.postEditUpdate(node, 'disconnected');\n      }\n    }\n    for (const node of dfs(this.root)) {\n      if (!node.viewModel.connected) {\n        node.viewModel.connected = true;\n        this.delegate?.postEditUpdate(node, 'connected');\n      } else if (node.viewModel.version > this.editStartVersion) {\n        this.delegate?.postEditUpdate(node, 'changed');\n      }\n    }\n    this.state = 'idle';\n    if (this.root.viewModel.version > this.editStartVersion) {\n      this.observe.notify();\n    }\n    this.editResumeObserve();\n  }\n\n  private addDom<T>(\n    node: T & MarkdownNode,\n    parent?: ViewModelNode,\n    childIndex?: number\n  ) {\n    const result = node as T & ViewModelNode;\n    if (\n      result.type === 'paragraph' ||\n      result.type === 'section' ||\n      result.type === 'code-block'\n    ) {\n      assert(!result.viewModel);\n      result.viewModel = new InlineViewModel(result, this, parent, childIndex);\n    } else {\n      assert(!result.viewModel);\n      result.viewModel = new ViewModel(result, this, parent, childIndex);\n    }\n    if (result.children) {\n      for (let i = 0; i < result.children.length; i++) {\n        this.addDom(result.children[i], result, i);\n      }\n    }\n    return result;\n  }\n\n  serialize(node?: ViewModelNode): MarkdownNode {\n    node = node ?? this.root;\n    assert(node.viewModel.tree === this);\n    assert(this.state === 'idle');\n    const result: MaybeViewModelNode = {...node};\n    delete result.viewModel;\n    result.children = node.children?.map(this.serialize);\n    return result;\n  }\n}\n\nexport type MaybeViewModelNode = MarkdownNode & {\n  viewModel?: ViewModel;\n  children?: MarkdownNode[];\n};\n\nexport type ViewModelNode = MarkdownNode & {\n  viewModel: ViewModel;\n  children?: ViewModelNode[];\n};\n\nexport type InlineViewModelNode = InlineNode & {\n  viewModel: InlineViewModel;\n  children?: ViewModelNode[];\n};\n\ninterface Position {\n  row: number;\n  column: number;\n}\n\nfunction indexToPosition(text: string, index: number): Position {\n  let row = 1;\n  let column = 1;\n  for (let i = 0; i < index; i++) {\n    if (text[i] === '\\n') {\n      row++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return {row, column};\n}\n\ninterface Edit {\n  startIndex: number;\n  startPosition: Position;\n  newEndIndex: number;\n  newEndPosition: Position;\n  oldEndIndex: number;\n  oldEndPosition: Position;\n  newText?: string;\n}\n\nfunction apply(text: string, edit: Edit) {\n  return (\n    text.substring(0, edit.startIndex) +\n    (edit.newText ?? '') +\n    text.substring(edit.oldEndIndex)\n  );\n}\n\nexport interface InlineEdit {\n  newText: string;\n  startIndex: number;\n  oldEndIndex: number;\n  newEndIndex: number;\n}\n"]}