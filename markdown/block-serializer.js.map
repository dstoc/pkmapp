{"version":3,"file":"block-serializer.js","sourceRoot":"","sources":["../../src/markdown/block-serializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {MarkdownNode} from './node.js';\n\nfunction* always(s: string): IndentGenerator {\n  while (true) {\n    yield s;\n  }\n}\n\nfunction* onceThenWhitespace(s: string): IndentGenerator {\n  const ws = s.replace(/./, ' ');\n  yield s;\n  while (true) {\n    yield ws;\n  }\n}\n\ntype IndentGenerator = Generator<string, string, unknown>;\ntype Indents = Generator<string, string, unknown>[];\n\nfunction serializeBlocks(\n    blocks: MarkdownNode[], indents: Indents, result: string[],\n    separator: (node: MarkdownNode) => string) {\n  let first = true;\n  for (const block of blocks) {\n    if (!first && separator.length) {\n      const nextSeparator = separator(block);\n      if (nextSeparator !== '') {\n        for (const indent of indents) {\n          result.push(indent.next().value);\n        }\n      }\n      result.push(nextSeparator);\n    }\n    first = false;\n    serialize(block, indents, result);\n  }\n}\n\nfunction serialize(node: MarkdownNode, indents: Indents, result: string[]) {\n  function indent() {\n    for (const indent of indents) {\n      result.push(indent.next().value);\n    }\n  }\n\n  let separator = (node: MarkdownNode) => '\\n';\n  const emptySeparator = () => '';\n  if (node.type === 'list') {\n    separator = emptySeparator;\n  }\n  if (node.type === 'list-item') {\n    indents = [...indents, onceThenWhitespace(node.marker)];\n    separator = (node: MarkdownNode) => {\n      if (node.type === 'list-item' || node.type === 'list') return '';\n      return '\\n';\n    };\n  } else if (node.type === 'block-quote') {\n    indents = [...indents, always(node.marker)];\n  } else if (node.type === 'paragraph') {\n    indent();\n    result.push(node.content);\n    result.push('\\n');\n  } else if (node.type === 'heading') {\n    indent();\n    result.push(node.marker);\n    result.push(' ');\n    result.push(node.content.trimStart());\n    result.push('\\n');\n  } else if (node.type === 'code-block') {\n    indent();\n    result.push('```');\n    if (node.info !== null) {\n      result.push(node.info);\n    }\n    result.push('\\n');\n    for (const line of node.content.trimEnd().split('\\n')) {\n      indent();\n      result.push(line);\n      result.push('\\n');\n    }\n    indent();\n    result.push('```\\n');\n  }\n  serializeBlocks(node.children || [], indents, result, separator);\n}\n\nexport function serializeToString(node: MarkdownNode): string {\n  const result: string[] = [];\n  serialize(node, [], result);\n  return result.join('');\n}\n"]}