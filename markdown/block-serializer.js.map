{"version":3,"file":"block-serializer.js","sourceRoot":"","sources":["../../src/markdown/block-serializer.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,OAAO,EAAC,MAAM,EAAC,MAAM,eAAe,CAAC;AAIrC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAS;IACxB,OAAO,IAAI,EAAE;QACX,MAAM,CAAC,CAAC;KACT;AACH,CAAC;AAED,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAS;IACpC,MAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChC,MAAM,CAAC,CAAC;IACR,OAAO,IAAI,EAAE;QACX,MAAM,EAAE,CAAC;KACV;AACH,CAAC;AAED,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAS;IACjC,MAAM,CAAC,CAAC;IACR,OAAO,IAAI,EAAE;QACX,MAAM,EAAE,CAAC;KACV;AACH,CAAC;AAKD,SAAS,SAAS,CAAC,IAAkB,EAAE,IAAkB;IACvD,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW;QAAE,OAAO,EAAE,CAAC;IACzC,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM;QAAE,OAAO,EAAE,CAAC;IACjE,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,eAAe,CACpB,MAAsB,EAAE,OAAgB,EAAE,MAAgB,EAAE,SAA2C;IACzG,IAAI,IAA4B,CAAC;IACjC,IAAI,iBAAiB,GAAG,KAAK,CAAC;IAC9B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC;QACtC,IAAI,IAAI,EAAE;YACR,MAAM,aAAa,GAAG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7C,IAAI,aAAa,KAAK,EAAE,EAAE;gBACxB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;iBAClC;aACF;YACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC5B;QACD,IAAI,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,EAAE;YAChD,IAAI,GAAG,KAAK,CAAC;YACb,iBAAiB,GAAG,IAAI,CAAC;SAC1B;aAAM;YACL,OAAO,MAAM,CAAC,MAAM,GAAG,eAAe,EAAE;gBACtC,MAAM,CAAC,GAAG,EAAE,CAAC;aACd;SACF;KACF;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,IAAkB;IAC1C,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,UAAU,CAAC;QAChB,KAAK,MAAM,CAAC;QACZ,KAAK,WAAW;YACd,OAAO,EAAE,CAAC;QACZ,KAAK,WAAW;YACd,OAAO,IAAI,CAAC,MAAM,CAAC;QACrB,KAAK,aAAa;YAChB,OAAO,IAAI,CAAC,MAAM,CAAC;QACrB,KAAK,SAAS;YACZ,OAAO,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAC3B,KAAK,YAAY;YACf,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QACnC,KAAK,aAAa;YAChB,OAAO,EAAE,CAAC;QACZ;YACE,2BAA2B;YAC3B,MAAM,CAAC,KAAK,CAAC,CAAC;KACjB;AACH,CAAC;AAED,SAAS,SAAS,CAAC,IAAkB,EAAE,OAAgB,EAAE,MAAgB,EAAE,SAA2C;IACpH,SAAS,MAAM;QACb,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;SAClC;IACH,CAAC;IAED,MAAM,0BAA0B,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;IACjE,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,UAAU,CAAC;QAChB,KAAK,MAAM;YACT,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM;QACR,KAAK,SAAS;YACZ,MAAM,EAAE,CAAC;YACT,IAAI,0BAA0B,EAAE;gBAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACzB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;aACvC;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM;QACR,KAAK,WAAW;YACd,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9C,OAAO,GAAG,CAAC,GAAG,OAAO,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI;gBAAE,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;YACjE,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK;gBAAE,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;YAClE,MAAM;QACR,KAAK,aAAa;YAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9C,OAAO,GAAG,CAAC,GAAG,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5C,MAAM;QACR,KAAK,WAAW;YACd,MAAM,EAAE,CAAC;YACT,IAAI,0BAA0B,EAAE;gBAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC3B;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM;QACR,KAAK,YAAY;YACf,MAAM,EAAE,CAAC;YACT,IAAI,0BAA0B,EAAE;gBAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxB;gBACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBACrD,MAAM,EAAE,CAAC;oBACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;gBACD,MAAM,EAAE,CAAC;gBACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpB;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM;QACR,KAAK,aAAa;YAChB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACrD,MAAM,EAAE,CAAC;gBACT,IAAI,0BAA0B,EAAE;oBAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;gBACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;YACD,MAAM;QACR;YACE,4BAA4B;YAC5B,MAAM,CAAC,KAAK,CAAC,CAAC;KACjB;IACD,MAAM,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IACzF,OAAO,0BAA0B,IAAI,eAAe,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,IAAkB,EAAE,SAA2C;IAC/F,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IACvC,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assert} from '../asserts.js';\n\nimport {MarkdownNode} from './node.js';\n\nfunction* always(s: string): IndentGenerator {\n  while (true) {\n    yield s;\n  }\n}\n\nfunction* onceThenWhitespace(s: string): IndentGenerator {\n  const ws = s.replace(/./g, ' ');\n  yield s;\n  while (true) {\n    yield ws;\n  }\n}\n\nfunction* onceThenNothing(s: string): IndentGenerator {\n  yield s;\n  while (true) {\n    yield '';\n  }\n}\n\ntype IndentGenerator = Generator<string, string, unknown>;\ntype Indents = Generator<string, string, unknown>[];\n\nfunction separator(prev: MarkdownNode, next: MarkdownNode): string {\n  if (next.type === 'list-item') return '';\n  if (prev.type === 'paragraph' && next.type === 'list') return '';\n  return '\\n';\n}\n\nfunction serializeBlocks(\n    blocks: MarkdownNode[], indents: Indents, result: string[], predicate?: (node: MarkdownNode) => boolean) {\n  let prev: MarkdownNode|undefined;\n  let serializedContent = false;\n  for (const block of blocks) {\n    const preResultLength = result.length;\n    if (prev) {\n      const nextSeparator = separator(prev, block);\n      if (nextSeparator !== '') {\n        for (const indent of indents) {\n          result.push(indent.next().value);\n        }\n      }\n      result.push(nextSeparator);\n    }\n    if (serialize(block, indents, result, predicate)) {\n      prev = block;\n      serializedContent = true;\n    } else {\n      while (result.length > preResultLength) {\n        result.pop();\n      }\n    }\n  }\n  return serializedContent;\n}\n\nexport function getPrefix(node: MarkdownNode): string {\n  switch (node.type) {\n    case 'document':\n    case 'list':\n    case 'paragraph':\n      return '';\n    case 'list-item':\n      return node.marker;\n    case 'block-quote':\n      return node.marker;\n    case 'section':\n      return node.marker + ' ';\n    case 'code-block':\n      return '```' + (node.info ?? '');\n    case 'unsupported':\n      return '';\n    default:\n      // TODO: assert unreachable\n      assert(false);\n  }\n}\n\nfunction serialize(node: MarkdownNode, indents: Indents, result: string[], predicate?: (node: MarkdownNode) => boolean) {\n  function indent() {\n    for (const indent of indents) {\n      result.push(indent.next().value);\n    }\n  }\n\n  const shouldSerializeNodeContent = !predicate || predicate(node);\n  switch (node.type) {\n    case 'document':\n    case 'list':\n      assert(node.children && node.children.length);\n      break;\n    case 'section':\n      indent();\n      if (shouldSerializeNodeContent) {\n        result.push(node.marker);\n        result.push(' ');\n        result.push(node.content.trimStart());\n      }\n      result.push('\\n');\n      break;\n    case 'list-item':\n      assert(node.children && node.children.length);\n      indents = [...indents, onceThenWhitespace(node.marker)];\n      if (node.checked === true) indents.push(onceThenNothing('[x] '));\n      if (node.checked === false) indents.push(onceThenNothing('[ ] '));\n      break;\n    case 'block-quote':\n      assert(node.children && node.children.length);\n      indents = [...indents, always(node.marker)];\n      break;\n    case 'paragraph':\n      indent();\n      if (shouldSerializeNodeContent) {\n        result.push(node.content);\n      }\n      result.push('\\n');\n      break;\n    case 'code-block':\n      indent();\n      if (shouldSerializeNodeContent) {\n        result.push('```');\n        if (node.info !== null) {\n          result.push(node.info);\n        }\n        result.push('\\n');\n        for (const line of node.content.trimEnd().split('\\n')) {\n          indent();\n          result.push(line);\n          result.push('\\n');\n        }\n        indent();\n        result.push('```');\n      }\n      result.push('\\n');\n      break;\n    case 'unsupported':\n      for (const line of node.content.trimEnd().split('\\n')) {\n        indent();\n        if (shouldSerializeNodeContent) {\n          result.push(line);\n        }\n        result.push('\\n');\n      }\n      break;\n    default:\n      // TODO: assert not reached?\n      assert(false);\n  }\n  const serializedChild = serializeBlocks(node.children || [], indents, result, predicate);\n  return shouldSerializeNodeContent || serializedChild;\n}\n\nexport function serializeToString(node: MarkdownNode, predicate?: (node: MarkdownNode) => boolean): string {\n  const result: string[] = [];\n  serialize(node, [], result, predicate);\n  return result.join('');\n}\n"]}