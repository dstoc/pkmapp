{"version":3,"file":"indent-util.js","sourceRoot":"","sources":["../src/indent-util.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getBlockSelectionTarget} from './block-selection-util.js';\nimport {MarkdownInline} from './markdown/inline-render.js';\nimport {ViewModelNode} from './markdown/view-model.js';\nimport {cast} from './asserts.js';\nimport {focusNode} from './markdown/host-context.js';\nimport {findAncestor, ancestors} from './markdown/view-model-util.js';\n\nexport function maybeEditBlockSelectionIndent(inline: MarkdownInline, mode: 'indent'|'unindent') {\n  const {hostContext: selectionHostContext} = getBlockSelectionTarget(inline) ?? {};\n  if (!selectionHostContext) return false;\n  const root = cast(selectionHostContext.root);\n  const finish = root.viewModel.tree.edit();\n  try {\n    for (const node of selectionHostContext.selection) {\n      if (mode === 'unindent') {\n        unindent(node, root);\n      } else {\n        indent(node, root);\n      }\n    }\n    focusNode(selectionHostContext, selectionHostContext.selectionFocus!, 0);\n    return true;\n  } finally {\n    finish();\n  }\n}\n\nexport function editInlineIndent(inline: MarkdownInline, mode: 'indent'|'unindent') {\n  const selection = inline.getSelection();\n  const node = cast(inline.node);\n  const hostContext = cast(inline.hostContext);\n  const root = cast(hostContext.root);\n  const finish = root.viewModel.tree.edit();\n  try {\n    if (selection) {\n      focusNode(hostContext, node, selection.start.index);\n    }\n    if (mode === 'unindent') {\n      unindent(node, root);\n    } else {\n      indent(node, root);\n    }\n  } finally {\n    finish();\n  }\n}\n\nfunction unindent(node: ViewModelNode, root: ViewModelNode) {\n  const {ancestor: listItem, path} = findAncestor(node, root, 'list-item');\n  if (!listItem || !path) return;\n  const target = path[0];\n  const nextSibling = listItem.viewModel.nextSibling;\n  const list = listItem.viewModel.parent!;\n  if (list.viewModel.nextSibling) return;\n  const targetListItemSibling = list.viewModel.parent!;\n  if (targetListItemSibling?.type === 'list-item') {\n    listItem.viewModel.insertBefore(\n        cast(targetListItemSibling.viewModel.parent),\n        targetListItemSibling.viewModel.nextSibling);\n  } else {\n    target.viewModel.insertBefore(\n        cast(list.viewModel.parent), list.viewModel.nextSibling);\n    listItem.viewModel.remove();\n  }\n  // Siblings of the undended list-item move to sublist.\n  if (nextSibling) {\n    let next: ViewModelNode|undefined = nextSibling;\n    while (next) {\n      if (listItem.viewModel.lastChild?.type !== 'list') {\n        listItem.viewModel.tree\n            .add({\n              type: 'list',\n            })\n            .viewModel.insertBefore(listItem);\n      }\n      const targetList = listItem.viewModel.lastChild!;\n      const toMove: ViewModelNode = next;\n      next = toMove.viewModel.nextSibling;\n      toMove.viewModel.insertBefore(targetList);\n    }\n  }\n  // The target might have been removed from the list item. Move any\n  // remaining siblings to the same level.\n  if (listItem.children?.length && !listItem.viewModel.parent) {\n    // TODO: move more than the first child.\n    listItem.viewModel.firstChild?.viewModel.insertBefore(\n        cast(target.viewModel.parent), target.viewModel.nextSibling);\n  }\n  if (!list.children?.length) {\n    list.viewModel.remove();\n  }\n}\n\nfunction indent(node: ViewModelNode, root: ViewModelNode) {\n  let target = node;\n  for (const ancestor of ancestors(node, root)) {\n    if (ancestor.type === 'list-item') {\n      break;\n    }\n    if (ancestor.type === 'document') {\n      break;\n    }\n    // Don't indent a section at the top level, unless we are inside a heading.\n    if (ancestor.type === 'section' &&\n        ancestor.viewModel.parent!.type == 'document') {\n      if (target.type === 'section') {\n        target = ancestor;\n      }\n      break;\n    }\n    target = ancestor;\n  }\n  let listItem: ViewModelNode;\n  if (target.viewModel.parent!.type === 'list-item') {\n    listItem = target.viewModel.parent!;\n  } else {\n    listItem = target.viewModel.tree.add({\n      type: 'list-item',\n      marker: '* ',\n    });\n    listItem.viewModel.insertBefore(cast(target.viewModel.parent), target);\n    target.viewModel.insertBefore(listItem);\n  }\n  const listItemPreviousSibling = listItem.viewModel.previousSibling;\n  if (listItemPreviousSibling?.type === 'list-item') {\n    const lastChild = listItemPreviousSibling.viewModel.lastChild;\n    if (lastChild?.type === 'list') {\n      listItem.viewModel.insertBefore(lastChild);\n    } else {\n      listItem.viewModel.insertBefore(listItemPreviousSibling);\n    }\n  } else if (listItemPreviousSibling?.type === 'list') {\n    listItem.viewModel.insertBefore(listItemPreviousSibling);\n  }\n  // Ensure the list-item we may have created is in a list.\n  if (listItem.viewModel.parent!.type !== 'list') {\n    const list = target.viewModel.tree.add({\n      type: 'list',\n    });\n    list.viewModel.insertBefore(cast(listItem.viewModel.parent), listItem);\n    listItem.viewModel.insertBefore(list);\n  }\n}\n"]}