{"version":3,"file":"directory-db.js","sourceRoot":"","sources":["../src/directory-db.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAAS,IAAI,CAAC,OAAmB;IAC/B,OAAO,IAAI,OAAO,CAChB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,CACnB,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC,CACzE,CACF,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,WAAW;IACxB,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACrD,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,EAAE,EAAE;QAC9B,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,QAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC;IACF,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,GAAW;IAEX,MAAM,EAAE,GAAG,MAAM,WAAW,EAAE,CAAC;IAC/B,MAAM,MAAM,GAAG,CACb,MAAM,IAAI,CACR,EAAE;SACC,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC;SACvC,WAAW,CAAC,aAAa,CAAE;SAC3B,GAAG,CAAC,GAAG,CAAC,CACZ,CACF,CAAC,MAAM,CAAC;IACT,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,GAAW,EACX,SAAoC;IAEpC,MAAM,EAAE,GAAG,MAAM,WAAW,EAAE,CAAC;IAC/B,MAAM,IAAI,CACR,EAAE;SACC,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC;SACvC,WAAW,CAAC,aAAa,CAAE;SAC3B,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CACvB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction wrap(request: IDBRequest) {\n  return new Promise<IDBRequest>(\n    (resolve, reject) => (\n      (request.onsuccess = () => resolve(request)), (request.onerror = reject)\n    )\n  );\n}\n\nasync function getDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open('pkmapp-directories');\n  request.onupgradeneeded = (e) => {\n    const database = request.result;\n    database.createObjectStore('directories');\n  };\n  return (await wrap(request)).result;\n}\n\nexport async function getDirectory(\n  key: string\n): Promise<FileSystemDirectoryHandle | undefined> {\n  const db = await getDatabase();\n  const result = (\n    await wrap(\n      db\n        .transaction('directories', 'readwrite')\n        .objectStore('directories')!\n        .get(key)\n    )\n  ).result;\n  return result;\n}\n\nexport async function setDirectory(\n  key: string,\n  directory: FileSystemDirectoryHandle\n) {\n  const db = await getDatabase();\n  await wrap(\n    db\n      .transaction('directories', 'readwrite')\n      .objectStore('directories')!\n      .put(directory, key)\n  );\n}\n"]}