{"version":3,"file":"directory-db.js","sourceRoot":"","sources":["../src/directory-db.ts"],"names":[],"mappings":"AAAA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAEjC,SAAS,IAAI,CAAC,OAAmB;IAC/B,OAAO,IAAI,OAAO,CAAa,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;AAC9H,CAAC;AAED,KAAK,UAAU,WAAW;IACxB,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACrD,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,EAAE;QAC5B,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,QAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC;IACF,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,GAAW;IAC5C,MAAM,EAAE,GAAG,CAAC,MAAM,WAAW,EAAE,CAAC,CAAC;IACjC,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,WAAW,CAAC,aAAa,CAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACpH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,GAAW,EAAE,SAAoC;IAClF,MAAM,EAAE,GAAG,CAAC,MAAM,WAAW,EAAE,CAAC,CAAC;IACjC,MAAM,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,WAAW,CAAC,aAAa,CAAE,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;AACzG,CAAC","sourcesContent":["// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction wrap(request: IDBRequest) {\n  return new Promise<IDBRequest>((resolve, reject) => (request.onsuccess = () => resolve(request), request.onerror = reject));\n}\n\nasync function getDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open('pkmapp-directories');\n  request.onupgradeneeded = e => {\n    const database = request.result;\n    database.createObjectStore('directories');\n  };\n  return (await wrap(request)).result;\n}\n\nexport async function getDirectory(key: string): Promise<FileSystemDirectoryHandle|undefined> {\n  const db = (await getDatabase());\n  const result = (await wrap(db.transaction('directories', 'readwrite').objectStore('directories')!.get(key))).result;\n  return result;\n}\n\nexport async function setDirectory(key: string, directory: FileSystemDirectoryHandle) {\n  const db = (await getDatabase());\n  await wrap(db.transaction('directories', 'readwrite').objectStore('directories')!.put(directory, key));   \n}\n"]}