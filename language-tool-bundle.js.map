{"version":3,"file":"language-tool-bundle.js","sourceRoot":"","sources":["../src/language-tool-bundle.ts"],"names":[],"mappings":"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","sourcesContent":["import {Command, SimpleCommandBundle} from './command-palette.js';\nimport {html} from './deps/lit.js';\nimport './markdown/block-render.js';\nimport {parseBlocks, Tree} from './markdown/block-parser.js';\nimport {DocumentNode} from './markdown/node.js';\nimport {MarkdownTree} from './markdown/view-model.js';\nimport {assert} from './asserts.js';\n\nexport function getLanguageTools(getSelection: () => string): Command[] {\n  return [\n    new SimpleCommandBundle(\n      'Analyze with LLM',\n      Object.entries(analyzePrompts).map(([description, suffix]) => ({\n        description,\n        async execute(_command, updatePreview) {\n          const loader = new StreamingLoader('');\n          const prompt = `${getSelection()}END\\n\\n${analyzePrefix} ${suffix}`;\n          const preview = () =>\n            html`<md-block-render\n              .block=${loader.tree.root}\n            ></md-block-render>`;\n\n          for await (const chunk of palm(prompt)) {\n            loader.append(chunk);\n            updatePreview(preview());\n          }\n\n          return new SimpleCommandBundle('what?', [\n            {\n              description: 'Replace selection',\n              async execute() {},\n              preview,\n            } as Command,\n            {\n              description: 'Append after selection',\n              async execute() {},\n              preview,\n              // TODO: is type inference broken?\n            } as Command,\n            {\n              description: 'Copy to clipboard',\n              async execute() {},\n              preview,\n              // TODO: is type inference broken?\n            } as Command,\n          ]);\n        },\n      })),\n    ),\n  ];\n}\n\n/**\n * Loads a markdown tree with streamed (appended) content in a not completely\n * inefficient way. The tree should not be modified other than by calling\n * `append`.\n */\nclass StreamingLoader {\n  readonly tree: MarkdownTree;\n  private parserTree: Tree;\n  constructor(private content: string) {\n    const {node, tree: parserTree} = parseBlocks(this.content);\n    this.parserTree = parserTree;\n    assert(node && node.type === 'document');\n    this.tree = new MarkdownTree(node);\n  }\n  append(newContent: string) {\n    const startIndex = this.content.length;\n    const oldEndIndex = this.content.length;\n    this.content += newContent;\n    const newEndIndex = this.content.length;\n    const edit = {\n      startIndex,\n      oldEndIndex,\n      newEndIndex,\n      startPosition: indexToPosition(this.content, startIndex),\n      oldEndPosition: indexToPosition(this.content, oldEndIndex),\n      newEndPosition: indexToPosition(this.content, newEndIndex),\n    };\n    const {node, tree: parserTree} = parseBlocks(\n      this.content,\n      this.parserTree,\n      edit,\n    );\n    this.parserTree = parserTree;\n    assert(node && node.type === 'document');\n    this.tree.setRoot(this.tree.add<DocumentNode>(node));\n  }\n}\n\nfunction indexToPosition(text: string, index: number) {\n  let row = 1;\n  let column = 1;\n  for (let i = 0; i < index; i++) {\n    if (text[i] === '\\n') {\n      row++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return {row, column};\n}\n\nasync function* palm(prompt: string): AsyncGenerator<string> {\n  const key = localStorage.getItem('palm-key');\n  const response = await fetch(\n    `https://generativelanguage.googleapis.com/v1beta3/models/text-bison-001:generateText?key=${key}`,\n    {\n      method: 'post',\n      body: JSON.stringify({\n        prompt: {\n          text: prompt,\n        },\n      }),\n    },\n  );\n  const data = await response.json();\n  yield data.candidates[0].output;\n}\n\nexport async function* openAiChat(prompt: string): AsyncGenerator<string> {\n  let buffer = '';\n  const key = localStorage.getItem('openai-key');\n  if (!key) throw new Error('`openai-key` not in localStorage');\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'post',\n    body: JSON.stringify({\n      model: 'gpt-3.5-turbo',\n      stream: true,\n      messages: [\n        {\n          role: 'user',\n          content: prompt,\n        },\n      ],\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${key}`,\n    },\n  });\n  const stream = response.body;\n  if (!stream) return;\n  for await (const chunk of iterateStream(\n    stream.pipeThrough(new TextDecoderStream()),\n  )) {\n    buffer += chunk;\n    const parts = buffer.split('\\n');\n    buffer = parts.pop()!;\n    for (const part of parts) {\n      if (part.startsWith('data: ')) {\n        const value = part.substring(6);\n        if (value === '[DONE]') return;\n        const content = JSON.parse(value).choices[0].delta.content;\n        if (content != null) {\n          yield content;\n        }\n      }\n    }\n  }\n}\n\nfunction iterateStream(stream: ReadableStream) {\n  return {\n    [Symbol.asyncIterator]: async function* () {\n      const reader = stream.getReader();\n      try {\n        while (true) {\n          const {done, value} = await reader.read();\n          if (done) return;\n          yield value;\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    },\n  };\n}\n\nconst analyzePrefix = `Analyze all text above and`;\nconst analyzePrompts = {\n  Elaborate: `Elaborate with 3-5 bullet point statements that expand by relating additional information not in the original text.`,\n  'Capture the essence': `Rewrite in a simple paragraph that captures the essence.`,\n  Defeat: `In bullet point statements, list 3-5 reasons why it might not work.`,\n  Reflect: `Complete the following prompts:\n1. That's interesting because...\n2. That reminds me of...\n3. It's similar because...\n4. It's different because...\n5. It's important because...`,\n};\n"]}