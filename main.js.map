{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport './markdown/block-render.js';\n\nimport {assert, cast} from './asserts.js';\nimport {contextProvider} from './deps/lit-labs-context.js';\nimport {customElement, html, LitElement, property, query, render,} from './deps/lit.js';\nimport {parseBlocks} from './markdown/block-parser.js';\nimport {MarkdownRenderer} from './markdown/block-render.js';\nimport {serializeToString} from './markdown/block-serializer.js';\nimport {hostContext, HostContext} from './markdown/host-context.js';\nimport {InlineInput, InlineKeyDown, InlineLinkClick,} from './markdown/inline-render.js';\nimport {InlineNode, ParagraphNode} from './markdown/node.js';\nimport {InlineViewModel, MarkdownTree, ViewModelNode} from './markdown/view-model.js';\n\n@customElement('test-host')\nexport class TestHost extends LitElement {\n  @query('md-block-render') blockRender!: MarkdownRenderer;\n  @query('input') fileInput!: HTMLInputElement;\n  @property({type: String, reflect: true}) status: 'loading'|'loaded'|'error'|undefined;\n  @property({type: Boolean, reflect: true}) dirty = false;\n  @property({attribute: false}) tree: MarkdownTree|undefined;\n  @property({attribute: false}) directory?: FileSystemDirectoryHandle;\n  @contextProvider({context: hostContext})\n  @property({reflect: false})\n  hostContext: HostContext = {};\n  override render() {\n    if (!this.directory) {\n      return html`\n        <button id=opendir @click=${this.ensureDirectory}>\n          Open directory...\n        </button>\n      `;\n    }\n    return html`\n    <input type=text value=\"test.md\"></input>\n    <button id=load @click=${this.load}>Load</button>\n    <button id=save @click=${this.markDirty}>Save</button>${this.dirty ? '*' : ''}\n    <br>\n    <md-block-render\n      .block=${this.tree?.root}\n      @inline-input=${this.onInlineInput}\n      @inline-link-click=${this.onInlineLinkClick}\n      @inline-keydown=${this.onInlineKeyDown}></md-block-render>`;\n  }\n  async ensureDirectory() {\n    if (!this.directory) {\n      this.directory = await showDirectoryPicker({mode: 'readwrite'});\n    }\n    return this.directory;\n  }\n  async load() {\n    this.status = 'loading';\n    this.tree = undefined;\n    const directory = await this.ensureDirectory();\n    const fileName = this.fileInput.value;\n    let text = '';\n    try {\n      const handle = await directory.getFileHandle(fileName);\n      const file = await handle.getFile();\n      const decoder = new TextDecoder();\n      text = decoder.decode(await file.arrayBuffer());\n    } catch (e) {\n      console.warn(e);\n    }\n\n    try {\n      const node = parseBlocks(text);\n      if (node) this.tree = new MarkdownTree(node);\n      this.tree?.observe.add(() => this.markDirty());\n      this.status = 'loaded';\n    } catch (e) {\n      this.status = 'error';\n      // TODO: store this somewhere?\n      // throw e;\n    }\n  }\n\n  private pendingModifications = 0;\n  async markDirty() {\n    this.dirty = true;\n    if (this.pendingModifications++) return;\n    while (true) {\n      let preSave = this.pendingModifications;\n      // Save immediately on the fist iteration, may help keep tests fast.\n      await this.save();\n      if (this.pendingModifications === preSave) {\n        this.pendingModifications = 0;\n        this.dirty = false;\n        return;\n      }\n      // Wait for an idle period with no modifications.\n      let preIdle = NaN;\n      do {\n        preIdle = this.pendingModifications;\n        // TODO: maybe a timeout is better?\n        await new Promise(resolve => requestIdleCallback(resolve));\n      } while (preIdle != this.pendingModifications);\n    }\n  }\n  private async save() {\n    if (!this.tree) return;\n    const text = serializeToString(this.tree.root);\n    const directory = await this.ensureDirectory();\n    const fileName = this.fileInput.value;\n    const handle = await directory.getFileHandle(fileName, {create: true});\n    const stream = await handle.createWritable();\n    await stream.write(text);\n    await stream.close();\n  }\n  onInlineLinkClick({\n    detail: {type, destination},\n  }: CustomEvent<InlineLinkClick>) {\n    this.fileInput.value = destination + '.md';\n    this.load();\n  }\n  onInlineKeyDown({\n    detail: {inline, node, keyboardEvent},\n  }: CustomEvent<InlineKeyDown>) {\n    if (!inline.node) return;\n    if (keyboardEvent.key === 'ArrowUp') {\n      keyboardEvent.preventDefault();\n      const result = inline.moveCaretUp();\n      if (result !== true) {\n        const prev = findPreviousDfs(\n            node,\n            ({type}) => ['paragraph', 'code-block', 'heading'].includes(type));\n        if (prev) focusNode(this.hostContext, prev, -result);\n      }\n    } else if (keyboardEvent.key === 'ArrowDown') {\n      keyboardEvent.preventDefault();\n      const result = inline.moveCaretDown();\n      if (result !== true) {\n        const next = findNextDfs(\n            node,\n            ({type}) => ['paragraph', 'code-block', 'heading'].includes(type));\n        if (next) focusNode(this.hostContext, next, -result);\n      }\n    } else if (keyboardEvent.key === 'Tab') {\n      keyboardEvent.preventDefault();\n      const {start} = inline.getSelection();\n      focusNode(this.hostContext, node, start.index);\n      if (keyboardEvent.shiftKey) {\n        unindent(node);\n      } else {\n        indent(node);\n      }\n    } else {\n      return;\n    }\n    normalizeTree(node.viewModel.tree);\n  }\n  onInlineInput(event: CustomEvent<InlineInput>) {\n    const {\n    detail: {inline, inputEvent, inputStart, inputEnd},\n  } = event;\n    if (!inline.node) return;\n    if (handleInlineInputAsBlockEdit(event, this.hostContext)) {\n      normalizeTree(inline.node.viewModel.tree);\n      return;\n    }\n    let newText;\n    let startIndex;\n    let oldEndIndex;\n    let newEndIndex: number;\n    if (inputEvent.inputType === 'insertText' ||\n        inputEvent.inputType === 'insertReplacementText' ||\n        inputEvent.inputType === 'insertFromPaste' ||\n        inputEvent.inputType === 'deleteByCut' ||\n        inputEvent.inputType === 'deleteContentBackward') {\n      startIndex = inputStart.index;\n      oldEndIndex = inputEnd.index;\n      if (inputEvent.inputType === 'insertReplacementText' ||\n          inputEvent.inputType === 'insertFromPaste') {\n        newText = inputEvent.dataTransfer!.getData('text');\n      } else if (inputEvent.inputType === 'deleteByCut') {\n        newText = '';\n      } else if (inputEvent.inputType === 'deleteContentBackward') {\n        newText = '';\n        startIndex = Math.max(0, startIndex - 1);\n      } else {\n        newText = inputEvent.data ?? '';\n      }\n      newEndIndex = startIndex + newText.length;\n    } else {\n      console.log('unsupported inputType:', inputEvent.inputType);\n      return;\n    }\n\n    const edit = {\n      newText,\n      startIndex,\n      oldEndIndex,\n      newEndIndex,\n    };\n\n    const newNodes = inline.node.viewModel.edit(edit);\n    if (newNodes) {\n      normalizeTree(inline.node.viewModel.tree);\n      const prev = newNodes[0].viewModel.previousSibling || newNodes[0].viewModel.parent!;\n      const next = findNextDfs(\n          prev,\n          ({type}) => ['paragraph', 'code-block', 'heading'].includes(type));\n      // TODO: is the focus offset always 0?\n      if (next) focusNode(this.hostContext, next, 0);\n    } else {\n      focusNode(this.hostContext, inline.node, newEndIndex);\n    }\n  }\n}\n\nfunction maybeMergeContentInto(\n    node: InlineNode&ViewModelNode, target: ViewModelNode,\n    context: HostContext): boolean {\n  if (target.type === 'code-block' || target.type === 'paragraph' ||\n      target.type === 'heading') {\n    focusNode(context, target, target.content.length);\n    (target.viewModel as InlineViewModel).edit({\n      startIndex: target.content.length,\n      oldEndIndex: target.content.length,\n      newEndIndex: target.content.length + node.content.length,\n      newText: node.content,\n    });\n    let parent = node.viewModel.parent;\n    node.viewModel.remove();\n    cleanupNode(parent);\n    return true;\n  }\n  return false;\n}\n\nfunction cleanupNode(node?: ViewModelNode) {\n  if (!node) return;\n  if (node.type === 'block-quote' || node.type === 'heading' ||\n      node.type === 'paragraph') {\n    return;\n  }\n  while (node?.children?.length === 0) {\n    const toRemove = node;\n    node = node.viewModel.parent;\n    toRemove.viewModel.remove();\n  }\n}\n\nfunction focusNode(context: HostContext, node: ViewModelNode, offset?: number) {\n  context.focusNode = node;\n  context.focusOffset = offset;\n  node.viewModel.observe.notify();\n}\n\nfunction swapNodes(node1: ViewModelNode, node2: ViewModelNode) {\n  const node1Parent = node1.viewModel.parent!;\n  const node1NextSibling = node1.viewModel.nextSibling;\n  node1.viewModel.insertBefore(cast(node2.viewModel.parent), node2);\n  node2.viewModel.insertBefore(node1Parent, node1NextSibling);\n}\n\nfunction* ancestors(node: ViewModelNode) {\n  while (node.viewModel.parent) {\n    yield node.viewModel.parent;\n    node = node.viewModel.parent;\n  }\n}\n\nfunction* reverseDfs(node: ViewModelNode, limit?: ViewModelNode) {\n  function next(next?: ViewModelNode) {\n    return next && (node = next);\n  }\n  do {\n    while (next(node.viewModel.previousSibling)) {\n      while (next(node.viewModel.lastChild))\n        ;\n      yield node;\n      if (node === limit) return;\n    }\n    if (next(node.viewModel.parent)) {\n      yield node;\n      if (node === limit) return;\n      continue;\n    }\n    return;\n  } while (true);\n}\n\nfunction* dfs(node: ViewModelNode) {\n  function next(next?: ViewModelNode) {\n    return next && (node = next);\n  }\n  let parent = false;\n  do {\n    if (!parent) {\n      let moved = false;\n      while (next(node.viewModel.firstChild)) moved = true;\n      if (moved) {\n        yield node;\n        continue;\n      }\n    }\n\n    if (next(node.viewModel.nextSibling)) {\n      parent = false;\n      if (!node.viewModel.firstChild) {\n        yield node;\n      }\n      continue;\n    }\n\n    if (next(node.viewModel.parent)) {\n      yield node;\n      parent = true;\n      continue;\n    }\n    return;\n  } while (true);\n}\n\nfunction findAncestor(node: ViewModelNode, type: string) {\n  const path = [node];\n  for (const ancestor of ancestors(node)) {\n    if (ancestor.type === type)\n      return {\n        ancestor,\n        path,\n      };\n    path.unshift(ancestor);\n  }\n  return {};\n}\n\nfunction unindent(node: ViewModelNode) {\n  const {ancestor: listItem, path} = findAncestor(node, 'list-item');\n  if (!listItem || !path) return;\n  const target = path[0];\n  const nextSibling = listItem.viewModel.nextSibling;\n  const list = listItem.viewModel.parent!;\n  const targetListItemSibling = list.viewModel.parent!;\n  if (targetListItemSibling?.type === 'list-item') {\n    listItem.viewModel.insertBefore(\n        cast(targetListItemSibling.viewModel.parent),\n        targetListItemSibling.viewModel.nextSibling);\n  } else {\n    target.viewModel.insertBefore(\n        cast(list.viewModel.parent), list.viewModel.nextSibling);\n    listItem.viewModel.remove();\n  }\n  // Siblings of the undended list-item move to sublist.\n  if (nextSibling) {\n    let next: ViewModelNode|undefined = nextSibling;\n    while (next) {\n      if (listItem.viewModel.lastChild?.type !== 'list') {\n        listItem.viewModel.tree\n            .import({\n              type: 'list',\n            })\n            .viewModel.insertBefore(listItem);\n      }\n      const targetList = listItem.viewModel.lastChild!;\n      const toMove: ViewModelNode = next;\n      next = toMove.viewModel.nextSibling;\n      toMove.viewModel.insertBefore(targetList);\n    }\n  }\n  // The target might have been removed from the list item. Move any\n  // remaining siblings to the same level.\n  if (listItem.children?.length && !listItem.viewModel.parent) {\n    // TODO: move more than the first child.\n    listItem.viewModel.firstChild?.viewModel.insertBefore(\n        cast(target.viewModel.parent), target.viewModel.nextSibling);\n  }\n  if (!list.children?.length) {\n    list.viewModel.remove();\n  }\n}\n\nfunction indent(node: ViewModelNode) {\n  let target = node;\n  for (const ancestor of ancestors(node)) {\n    if (ancestor.type === 'list-item') {\n      break;\n    }\n    // Don't indent a section at the top level, unless we are inside a heading.\n    if (ancestor.type === 'section' &&\n        ancestor.viewModel.parent!.type == 'document') {\n      if (target.type === 'heading') {\n        target = ancestor;\n      }\n      break;\n    }\n    target = ancestor;\n  }\n  let listItem: ViewModelNode;\n  if (target.viewModel.parent!.type === 'list-item') {\n    listItem = target.viewModel.parent!;\n  } else {\n    listItem = target.viewModel.tree.import({\n      type: 'list-item',\n      marker: '* ',\n    });\n    listItem.viewModel.insertBefore(cast(target.viewModel.parent), target);\n    target.viewModel.insertBefore(listItem);\n  }\n  const listItemPreviousSibling = listItem.viewModel.previousSibling;\n  if (listItemPreviousSibling?.type === 'list-item') {\n    const lastChild = listItemPreviousSibling.viewModel.lastChild;\n    if (lastChild?.type === 'list') {\n      listItem.viewModel.insertBefore(lastChild);\n    } else {\n      listItem.viewModel.insertBefore(listItemPreviousSibling);\n    }\n  } else if (listItemPreviousSibling?.type === 'list') {\n    listItem.viewModel.insertBefore(listItemPreviousSibling);\n  }\n  // Ensure the list-item we may have created is in a list.\n  if (listItem.viewModel.parent!.type !== 'list') {\n    const list = target.viewModel.tree.import({\n      type: 'list',\n    });\n    list.viewModel.insertBefore(cast(listItem.viewModel.parent), listItem);\n    listItem.viewModel.insertBefore(list);\n  }\n}\n\nfunction insertSiblingParagraph(\n    node: InlineNode&ViewModelNode, startIndex: number, context: HostContext): boolean {\n  const newParagraph = node.viewModel.tree.import({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(\n      cast(node.viewModel.parent), node.viewModel.nextSibling);\n  finishInsertParagraph(node, newParagraph, startIndex, context);\n  return true;\n}\n\nfunction insertParagraphInList(\n    node: InlineNode&ViewModelNode, startIndex: number, context: HostContext): boolean {\n  const {ancestor, path} = findAncestor(node, 'list');\n  if (!ancestor) return false;\n  let targetList;\n  let targetListItemNextSibling;\n  if (node.viewModel.nextSibling) {\n    if (node.viewModel.nextSibling.type === 'list') {\n      targetList = node.viewModel.nextSibling;\n      targetListItemNextSibling = targetList.viewModel.firstChild;\n    } else {\n      targetList = node.viewModel.tree.import({\n        type: 'list',\n      });\n      targetList.viewModel.insertBefore(\n          cast(node.viewModel.parent), node.viewModel.nextSibling);\n      targetListItemNextSibling = undefined;\n    }\n  } else {\n    targetList = ancestor;\n    targetListItemNextSibling = path[0].viewModel.nextSibling;\n  }\n\n  const firstListItem = targetList.viewModel.firstChild;\n  if (firstListItem && firstListItem.type !== 'list-item') return false;\n  const newListItem = node.viewModel.tree.import({\n    type: 'list-item',\n    marker: firstListItem?.marker ?? '* ',\n  });\n  newListItem.viewModel.insertBefore(targetList, targetListItemNextSibling);\n  const newParagraph = node.viewModel.tree.import({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(newListItem);\n  finishInsertParagraph(node, newParagraph, startIndex, context);\n  return true;\n}\n\nfunction insertParagraphInSection(\n    node: InlineNode&ViewModelNode, startIndex: number, context: HostContext): boolean {\n  const {ancestor: section, path} = findAncestor(node, 'section');\n  if (!section) return false;\n  const newParagraph = node.viewModel.tree.import({\n    type: 'paragraph',\n    content: '',\n  });\n  newParagraph.viewModel.insertBefore(section, path[0].viewModel.nextSibling);\n  finishInsertParagraph(node, newParagraph, startIndex, context);\n  return true;\n}\n\nfunction finishInsertParagraph(\n  node: InlineNode&ViewModelNode, newParagraph: ParagraphNode&ViewModelNode, startIndex: number, context: HostContext) {\n  const atStart = startIndex === 0;\n  if (atStart) { swapNodes(node, newParagraph); }\n  else {\n    (newParagraph.viewModel as InlineViewModel).edit({\n      startIndex: 0,\n      newEndIndex: 0,\n      oldEndIndex: 0,\n      newText: node.content.substring(startIndex)\n    });\n\n\n    (node.viewModel as InlineViewModel).edit({\n      startIndex,\n      oldEndIndex: node.content.length,\n      newEndIndex: startIndex,\n      newText: '',\n    });\n  }\n  focusNode(context, newParagraph);\n}\n\nfunction normalizeSection(node: ViewModelNode) {\n  const isFirstDocumentSection = node.viewModel.parent?.type === 'document' &&\n      node.viewModel.parent.viewModel.firstChild === node;\n  let next = node.viewModel.firstChild;\n  const sectionNextSibling = node.viewModel.nextSibling;\n  let hasHeading = false;\n  while (next) {\n    const child = next;\n    next = child.viewModel.nextSibling;\n    if (child.type === 'heading') {\n      if (hasHeading) {\n        // Found a second heading, split out a new sibling section and move\n        // all remaining children there.\n        const newSection = node.viewModel.tree.import({type: 'section'});\n        newSection.viewModel.insertBefore(child.viewModel.parent!, child);\n        child.viewModel.insertBefore(newSection);\n        while (next) {\n          const child = next;\n          next = child.viewModel.nextSibling;\n          child.viewModel.insertBefore(newSection);\n        }\n        break;\n      }\n      hasHeading = true;\n    } else if (child.type === 'section') {\n      // Sections can't contain other sections.\n      child.viewModel.insertBefore(\n          cast(node.viewModel.parent), sectionNextSibling);\n    } else if (isFirstDocumentSection) {\n      // First document section only optionally requires a heading.\n      hasHeading = true;\n    } else if (!hasHeading) {\n      child.viewModel.insertBefore(\n          cast(node.viewModel.parent), sectionNextSibling);\n    }\n  }\n  if (hasHeading) {\n    return true;\n  }\n  // The section did not have a heading, the children have been removed.\n  assert(!node.children || !node.children.length);\n  node.viewModel.remove();\n  return false;\n}\n\nfunction findNextDfs(\n    node: ViewModelNode, predicate: (node: ViewModelNode) => boolean) {\n  for (const next of dfs(node)) {\n    if (next !== node && predicate(next)) return next;\n  }\n  return null;\n}\n\nfunction findPreviousDfs(\n    node: ViewModelNode, predicate: (node: ViewModelNode) => boolean) {\n  for (const next of reverseDfs(node)) {\n    if (next !== node && predicate(next)) return next;\n  }\n  return null;\n}\n\nfunction findChild(\n    node: ViewModelNode, predicate: (node: ViewModelNode) => boolean) {\n  let next = node.viewModel.firstChild;\n  while (next) {\n    if (next && predicate(next)) return next;\n    next = next.viewModel.nextSibling;\n  }\n  return null;\n}\n\nfunction* children(node: ViewModelNode) {\n  let next = node.viewModel.firstChild;\n  while (next) {\n    yield next;\n    next = next.viewModel.nextSibling;\n  }\n}\n\nfunction normalizeSections(node: ViewModelNode) {\n  let section: ViewModelNode|null;\n  do {\n    section = findChild(node, ({type}) => type === 'section');\n    if (!section) return;\n  } while (!normalizeSection(section));\n  while (section && section.viewModel.nextSibling) {\n    const node: ViewModelNode = section.viewModel.nextSibling;\n    if (node.type === 'section') {\n      if (normalizeSection(node)) section = node;\n    } else if (node.type === 'heading') {\n      // Create and advance to a new section to hold the heading.\n      section = node.viewModel.tree.import({\n        type: 'section',\n      });\n      assert(section);\n      section.viewModel.insertBefore(cast(node.viewModel.parent), node);\n      node.viewModel.insertBefore(section);\n    } else {\n      node.viewModel.insertBefore(section);\n    }\n  }\n}\n\nfunction normalizeTree(tree: MarkdownTree) {\n  const document = tree.root;\n  // ensure first child is a section\n  if (document.viewModel.firstChild?.type !== 'section') {\n    const section = tree.import({\n      type: 'section',\n    });\n    section.viewModel.insertBefore(document, document.viewModel.firstChild);\n  }\n  for (const node of dfs(tree.root)) {\n    normalizeSections(node);\n  }\n  for (const node of dfs(tree.root)) {\n    if (node.type === 'list') {\n      while (node.viewModel.nextSibling?.type === 'list') {\n        let next = node.viewModel.nextSibling;\n        while (next.viewModel.firstChild) {\n          next.viewModel.firstChild.viewModel.insertBefore(node);\n        }\n        next.viewModel.remove();\n      }\n    }\n  }\n}\n\nfunction handleInlineInputAsBlockEdit({\n  detail: {inline, inputEvent, inputStart, inputEnd},\n}: CustomEvent<InlineInput>, context: HostContext): boolean {\n  // TODO: Call normalizeTree at the right times\n  if (!inline.node) return false;\n  if (inputEvent.inputType === 'deleteContentBackward') {\n    if (inputStart.index !== 0 || inputEnd.index !== 0) return false;\n    const node = inline.node;\n    // Turn headings and code-blocks into paragraphs.\n    if (node.type === 'heading' || node.type === 'code-block') {\n      const paragraph = node.viewModel.tree.import({\n        type: 'paragraph',\n        content: node.content,  // TODO: detect new blocks\n      });\n      paragraph.viewModel.insertBefore(cast(node.viewModel.parent), node);\n      node.viewModel.remove();\n      focusNode(context, paragraph, 0);\n      return true;\n    }\n\n    // Remove a surrounding block-quote.\n    const {ancestor} = findAncestor(node, 'block-quote');\n    if (ancestor) {\n      // Unless there's an earlier opportunity to merge into a previous\n      // content node.\n      for (const prev of reverseDfs(node, ancestor)) {\n        if (maybeMergeContentInto(node, prev, context)) return true;\n      }\n      for (const child of [...children(ancestor)]) {\n        child.viewModel.insertBefore(\n            cast(ancestor.viewModel.parent), ancestor);\n      }\n      ancestor.viewModel.remove();\n      focusNode(context, node);\n      return true;\n    }\n\n    // Merge into a previous content node.\n    for (const prev of reverseDfs(node)) {\n      if (maybeMergeContentInto(node, prev, context)) return true;\n    }\n  } else if (inputEvent.inputType === 'insertParagraph') {\n    return insertParagraphInList(\n            inline.node, inputStart.index, context) || insertParagraphInSection(\n            inline.node, inputStart.index, context);\n  } else if (inputEvent.inputType === 'insertLineBreak') {\n    return insertSiblingParagraph(\n            inline.node, inputStart.index, context);\n  }\n  return false;\n}\n\nrender(html`<test-host></test-host>`, document.body);\n"]}