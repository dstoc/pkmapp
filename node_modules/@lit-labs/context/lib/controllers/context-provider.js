import{ContextRequestEvent as t}from"../context-request-event.js";import{ValueNotifier as s}from"../value-notifier.js";
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */class i extends Event{constructor(t){super("context-provider",{bubbles:!0,composed:!0}),this.context=t}}class e extends s{constructor(s,i,e){super(void 0!==i.context?i.initialValue:e),this.onContextRequest=t=>{const s=t.composedPath()[0];t.context===this.context&&s!==this.host&&(t.stopPropagation(),this.addCallback(t.callback,s,t.subscribe))},this.onProviderRequest=s=>{const i=s.composedPath()[0];if(s.context===this.context&&i!==this.host){for(const[s,{consumerHost:i}]of this.subscriptions)i.dispatchEvent(new t(this.context,s,!0));s.stopPropagation()}},this.host=s,void 0!==i.context?this.context=i.context:this.context=i,this.attachListeners(),this.host.addController(this)}attachListeners(){this.host.addEventListener("context-request",this.onContextRequest),this.host.addEventListener("context-provider",this.onProviderRequest)}hostConnected(){this.host.dispatchEvent(new i(this.context))}}export{e as ContextProvider,i as ContextProviderEvent};
//# sourceMappingURL=context-provider.js.map
